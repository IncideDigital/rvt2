;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Output Modules

[print]
; A simple module to print the output from other modules to the standard output.
inherits: base.output.JSONSink
outfile: CONSOLE

[base.output.JSONSink]
module: base.output.JSONSink
outfile:
; Possible values for file_exists: OVERWRITE, APPEND or ERROR
file_exists: APPEND
; allows using this module as a single job. Only file_exists and outfile can be configured this way
modules:
    base.output.CSVSink outfile="{outfile}" file_exists='{file_exists}'
default_params: {'outfile':'${outfile}','file_exists':'${file_exists}'}


[base.output.CSVSink]
module: base.output.CSVSink
; delimiter: ;
; quotechar: "
; extrasaction: raise
outfile:
; Possible values for file_exists: OVERWRITE, APPEND or ERROR
file_exists: OVERWRITE
; restval:
write_header: True
; field_size_limit: 131072
; Possible values for quoting: QUOTE_MINIMAL=0, QUOTE_ALL=1, QUOTE_NONNUMERIC=2, QUOTE_NONE=3
; quoting: 2
; allows using this module as a single job. Only write_header, file_exists and outfile can be configured this way
modules:
    base.output.CSVSink outfile="{outfile}" file_exists='{file_exists}' write_header='{write_header}', append_header='{append_header}'
default_params: {'outfile':'${outfile}','file_exists':'${file_exists}','write_header':'${write_header}', 'append_header':False}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Input Modules

[base.input.CSVReader]
module: base.input.CSVReader
; encoding: utf-8
; delimiter: ;
; quotechar: "
; restval:
; fieldnames:
; ignore_lines: 0
; content_type:
; progress.disable: False
; progress.cmd: cat "{path}" | wc -l
; field_size_limit: 131072
modules:
    base.input.CSVReader encoding='{encoding}' delimiter={delimiter} ignore_lines={ignore_lines} fieldnames="{fieldnames}"
default_params: {'encoding':'utf-8', 'delimiter':';', 'ignore_lines':'0', 'fieldnames':''}

[base.input.JSONReader]
module: base.input.JSONReader
; encoding: utf-8
; progress.disable: False
; progress.cmd: cat "{path}" | wc -l
modules:
    base.input.JSONReader encoding='{encoding}'
default_params: {'encoding':'utf-8'}

[base.input.AllLinesInFile]
module: base.input.AllLinesInFile
; encoding: utf-8
; progress.disable: False
; progress.cmd: cat "{path}" | wc -l
modules:
    base.input.AllLinesInFile encoding='{encoding}'
default_params: {'encoding':'utf-8'}

[base.input.ForAllLinesInFile]
module: base.input.ForAllLinesInFile
; encoding: utf-8
; progress.disable: False
; progress.cmd: cat "{path}" | wc -l

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Mutation Modules

[base.mutations.DateFields]
module: base.mutations.DateFields
fields:
    creation_date last_modification
    file_access file_birth file_modified file_changerecord
    email_sent email_modified email_delivered email_created email_received

[base.mutations.MirrorOptions]
module: base.mutations.MirrorOptions

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Directory modules

[base.directory.DirectoryFilter]
module: base.directory.DirectoryFilter
;filter:
;    plain
; void_extension: True
; followlinks: False
; progress: True
; progress.cmd: find . -type d | wc -l
; progress.cmd: tree -adfi "{path}" --noreport | wc -l
; exclude_pattern:
; restartable: False

[base.directory.FileParser]
module: base.directory.FileParser
; parsers:
;   (.*/regex$) modulename
;   (.*/regex$) modulename

[base.directory.FileClassifier]
module: base.directory.FileClassifier
categories: office executable compressed plain audio video image email crypto geographic unclassified
; check_extension: True

[base.directory.DirectoryClear]
module: base.directory.DirectoryClear
; target:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; utils

; As a convenience, an alias for GlobFilter: run next modules if a path exist
[if_path_exists]
module: base.directory.GlobFilter
recursive: False

; As a convenience, an alias for GlobFilter: run next modules for each path in a glob
[for_each_path]
module: base.directory.GlobFilter

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Commands Modules

[base.commands.Command]
module: base.commands.Command
cmd:
stdout:
infile:
outfile:
append: False
run_before: False
run_after: True
from_dir: ${casedir}
delete_exists: True

[base.commands.RegexFilter]
module: base.commands.RegexFilter
keyword_file: ${casedir}/searches_files/kw
; cmd: grep -iP "{regex}" "{path}"
; cmd: grep -FP "{regex}" "{path}"
cmd: ag --nocolor -C0 --nofilename -i "{regex}" "{path}"
encoding: utf-8

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Threads Modules

[base.threads.Fork]
module: base.threads.Fork
secondary_job: base.common.JSONSink outfile=CONSOLE

[base.threads._InjectedInput]
module: base.threads._InjectedInput

[base.threads.WaitForJob]
step: 30
timeout: 600
job_name:
exclude_present_job: True
