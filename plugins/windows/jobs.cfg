[windows]
; this parameter will be filled automatically.
plugindir:
description: This plugin extracts and analyzes forensic artifacts from a Windows system.

[events]
; this parameter will be filled automatically.
plugindir:
description: This plugin converts Windows events into JSON objects, for ElasticSearch

[windows.preforensics]
description: Main set of forensic analysis jobs to run on a Windows disk partition.

  Artifacts parsed:

    - MFT Timeline
    - Characterize: `${windows.characterize:outfile}`
    - Registry: `${plugins.windows.RVT_autorip.Autorip:outdir}`
    - Event Logs:
        - `${plugins.windows:eventdir}`
        - `${plugins.windows:eventsanalysisdir}`
    - Lnk and Jumplists:
        - `${plugins.windows.RVT_lnk.LnkExtract:outdir}`
        - `${plugins.windows.RVT_lnk.LnkExtractAnalysis:outdir}`
    - UsnJrnl: `${plugins.windows.RVT_UsnJrnl.UsnJrnl:outdir}`
    - Prefetch: `${plugins.windows.RVT_exec.Prefetch:outdir}`
    - Browser History: `${plugins.common.RVT_history.History:outdir}`
    - Recycle Bin: `${plugins.windows.RVT_recycle.Recycle:outdir}`
    - RFC: `${plugins.windows.RVT_exec.RFC:outdir}`
    - Activities Cache: `${plugins.windows.RVT_activity_cache.ActivitiesCache:outdir}`
    - USB artifacts: `${plugins.windows.RVT_usb.USBSetupAPI:outdir}`
    ;- SRUM: `${plugins.windows.RVT_srum.Srum:outdir}`
help_section: windows
jobs:
  mount vss={vss}
  allocfiles
  fs_timeline
  windows.registry_hives
  windows.characterize
  windows.recentfiles_default
  windows.events
  windows.eventartifacts
  windows.execution
  browsers
  windows.scheduled_tasks_all
  windows.activities_cache
  windows.notifications
  windows.bits
  windows.mplogs
  windows.quarantine
  windows.remotedesktop
  windows.usb
  windows.recycle vss={vss}
  windows.usnjrnl_all vss={vss}
  ; windows.bits
  windows.srum
default_params: {'vss':False,
  'timeline_outdir':'${plugins.common.RVT_timelines.Timelines:outdir}'}
params_help: {'vss':'process Volume Shadow Snapshots'}


;;;;;;;;;;;;;;;;;;;;;;; CHARACTERIZATION

[windows.characterize]
description: Describes basic information about Windows partitions and users.
  Information includes:
    - OS name, version, ID and owner
    - OS Installation (or update) date
    - Creation and last login/logoff dates for every user present
help_section: windows
modules:
  base.templates.TemplateSink template_file='{template_file}' outfile='{outfile}' file_exists='{file_exists}'
  plugins.windows.RVT_os_info.CharacterizeWindows aux_file='{aux_file}'
hivesdir: ${plugins.windows:hivesdir}
template_file: templates/os_summary.mako
outfile: ${analysisdir}/os_summary.md
default_params: {'outfile':'${outfile}',
  'aux_file': '${plugins.windows:auxdir}/os_info.json',
  'template_file':'${template_file}',
  'file_exists':'OVERWRITE'}
params_help: {
  'outfile':'path to file were results are stored (in markdown format)',
  'aux_file': 'json file where OS info will be stored and used by other jobs',
  'template_file':'mako template to display results'}

;;;;;;;;;;;;;;;;;;;;;;; HASHES

[windows.hashes]
description: Calculate hashes of selected files and provided by artifacts in order to match them with search engines for malware.
help_section: windows
jobs:
  windows.hashes_files
  windows.hashes_artifacts
  windows.hashes_sorted

[windows.hashes_files]
description: Calculate hashes of selected files in order to match them with search engines for malware.
modules:
  base.output.CSVSink file_exists=APPEND outfile='{outfile}' fieldnames='@timestamp artifact path file_birth file_modified hash'
  base.mutations.SetFields fields='{{{{"@timestamp":"{{file_birth}}"}}}}'
  base.mutations.DateFields fields="file_birth file_modified"
  base.mutations.SkipResults fields='hash' fields_not_present='keep'
  base.mutations.CalculateHash path_field='path' hash_field='hash' from_dir='${casedir}'
  base.mutations.SetFields presets='{{"artifact":"filesystem"}}'
  base.mutations.FilterData conditions='[("path",".*(/ProgramData/|/Program\\s?Files.*/|/Windows/Temp/|/Users/|${source}/mnt/p\\d+/T\\w?mp/).*(\\.exe|\\.dll|\\.bat|\\.ps1|\\.msi)$$"),("path","^${source}/mnt/p\\d+/[^/]+(\\.exe|\\.dll|\\.bat|\\.ps1|\\.msi)$$")]' is_regex='True'
  base.mutations.GetFields fields="path file_birth file_modified"
  base.input.CSVReader check_path_exists=False delimiter="|" fieldnames="file_md5 path file_inode file_mode file_uid file_gid file_size file_access file_modified file_changerecord file_birth"
default_params: {
  'outfile':'${analysisdir}/hashes/file_hashes_tmp.csv'
  }
path: ${outputdir}/timeline/${source}_BODY.csv

[windows.hashes_artifacts]
description: Extract hashes provided by artifacts in order to match them with search engines for malware.
jobs:
  windows.hashes_artifacts.amcache
  windows.hashes_artifacts.events
  windows.hashes_artifacts.syscache 

[windows.hashes_artifacts.amcache]
description: Extract hashes provided by amcache file in ouput/windows/hives
modules:
  base.output.CSVSink file_exists=APPEND outfile='{outfile}' fieldnames='@timestamp artifact path file_birth file_modified hash'
  base.mutations.SetFields presets='{{"artifact":"amcache"}}'
  base.mutations.RenameFields fields={rename_fields} new_fields={new_rename_fields}
  base.directory.GlobFilter ftype='file'
  base.mutations.DateFields fields='KeyLastWrite Created LastModified' missing_action='SKIP_ALL'
  base.mutations.SkipResults fields='Sha1Hash' fields_not_present='keep' condition='any'
  base.mutations.GetFields fields="KeyLastWrite AppPath Created LastModified Sha1Hash "
  base.input.CSVReader delimiter=";"
default_params: {
  'outfile':'${analysisdir}/hashes/file_hashes_tmp.csv',
  'rename_fields':'KeyLastWrite\ AppPath\ Created\ LastModified\ Sha1Hash',
  'new_rename_fields':'@timestamp\ path\ file_birth\ file_modified\ hash'
  }
path: ${outputdir}/windows/hives/amcache*.csv

[windows.hashes_artifacts.events]
description: Extract hashes provided by events file in ouput/windows/events
modules:
  base.output.CSVSink file_exists=APPEND outfile='{outfile}' fieldnames='@timestamp artifact path file_birth file_modified hash'
  base.mutations.DateFields fields='@timestamp' 
  windows.RVT_eventartifacts.Hash
  windows.RVT_eventartifacts.Filter_Events
  base.input.JSONReader check_path_exists=False progress.disable='True'
events_dict: {
  '15':'Microsoft-Windows-Sysmon',
  '1':'Microsoft-Windows-Sysmon',
  '6':'Microsoft-Windows-Sysmon',
  '2050':'Microsoft-Windows-Windows Defender',
  '8005':'Microsoft-Windows-AppLocker',
  '8002':'Microsoft-Windows-AppLocker',
  '8004':'Microsoft-Windows-AppLocker'
  }
default_params: {
  'outfile':'${analysisdir}/hashes/file_hashes_tmp.csv'
  }
path: ${outputdir}/windows/events/events.json

[windows.hashes_artifacts.syscache]
description: Extract hashes provided by syscache file in ouput/windows/hives
modules:
  base.output.CSVSink file_exists=APPEND outfile='{outfile}' fieldnames='@timestamp artifact path file_birth file_modified hash'
  base.mutations.SetFields presets='{{"artifact":"syscache", "file_birth":"", "file_modified":""}}'
  base.mutations.DateFields fields='@timestamp' 
  base.mutations.RenameFields fields={rename_fields} new_fields={new_rename_fields}
  base.directory.GlobFilter ftype='file'
  base.mutations.SkipResults fields='Sha1'
  base.mutations.GetFields fields="Date Name Sha1"
  base.input.CSVReader delimiter=";"
default_params: {
  'outfile':'${analysisdir}/hashes/file_hashes_tmp.csv',
  'rename_fields':'Date\ Name\ Sha1',
  'new_rename_fields':'@timestamp\ path\ hash'
  }
path: ${outputdir}/windows/hives/syscache*.csv

[windows.hashes_sorted]
description: Job to sort file_hashes file
jobs:
  windows.hashes_sorted.csv_to_sorted_csv path={infile_1} outfile={outfile_1}
  base.directory.DirectoryClear target={infile_1}
infile_1: ${analysisdir}/hashes/file_hashes_tmp.csv
outfile_1: ${analysisdir}/hashes/file_hashes.csv
default_params: {
  'infile_1':'${infile_1}',
  'outfile_1':'${outfile_1}'
  }

[windows.hashes_sorted.csv_to_sorted_csv]
modules:
  base.output.CSVSink outfile={outfile} file_exists="OVERWRITE"
  base.mutations.SortResults fields="@timestamp"
  base.input.CSVReader check_path_exists=False progress.disable=True
default_params: {
  'outfile': '${analysisdir}/hashes/file_hashes.csv',
  'path': '${analysisdir}/hashes/file_hashes_tmp.csv'}

;;;;;;;;;;;;;;;;;;;;;;; RECENTFILES

[windows.recentfiles]
description: Parse lnk and jumplist files in a directory.
  For enhanced parsing results, it is recommended to run `fs_timeline` or `mft_timeline` first.
  To create a summary of all recentfiles run `windows.recentfiles_report` after the present job.
help_section: windows
modules:
  plugins.windows.RVT_lnk.LnkParser outdir={outdir} appid={appid} volume_id={volume_id} username={username}
default_params: {'outdir':'${plugins.windows.RVT_lnk.LnkExtract:outdir}',
  'appid':'${plugins.windows.RVT_lnk.LnkExtract:appid}',
  'volume_id': '',
  'username': ''}
params_help: {'path':'absolute path to folder containing lnk|automaticdestestination|customdestination files',
  'volume_id': 'volume identifier, such as partition number. Ex: p03',
  'outdir':'path to directory where generated files will be stored',
  'appid':'path to file relating applications id with names',
  'username': 'User name identifier'}

[windows.recentfiles_report]
description: Generates a summary file with all recent files sources.
help_section: windows
modules:
  plugins.windows.RVT_lnk.LnkExtractAnalysis outdir={outdir} lnk_dir={lnk_dir}
default_params: {
  'lnk_dir':'${plugins.windows.RVT_lnk.LnkExtract:outdir}',
  'outdir':'${plugins.windows.RVT_lnk.LnkExtractAnalysis:outdir}'}
params_help: {
  'lnk_dir':'path to directory where files generated by windows.recentfiles are be stored',
  'outdir':'path to directory where generated analysis files will be stored'}

[windows.recentfiles_default]
description: Parse all lnk and jumplist files present in a mounted source.
  Generates a summary file with all recent files sources.
  For enhanced parsing results, it is recommended to run `fs_timeline` or `mft_timeline` first.
help_section: windows
jobs:
  plugins.windows.RVT_lnk.LnkExtract outdir={outdir} appid={appid}
  plugins.windows.RVT_lnk.LnkExtractAnalysis outdir={outdir_analysis} lnk_dir={outdir}
appid: ${plugins.windows.RVT_lnk.LnkExtract:appid}
default_params: {'outdir':'${plugins.windows.RVT_lnk.LnkExtract:outdir}',
  'outdir_analysis':'${plugins.windows.RVT_lnk.LnkExtractAnalysis:outdir}',
  'appid':'${plugins.windows.RVT_lnk.LnkExtract:appid}'}
params_help: {
  'outdir':'path to directory where generated files will be stored',
  'outdir_analysis':'path to directory where generated analysis files will be stored',
  'appid':'path to file relating applications id with names'}

;;;;;;;;;;;;;;;;;;;;;;;;;;; EXECUTION

[windows.execution]
description: Extract and parse Windows artifacts related with applications execution (Prefetch, RFC, CCM).

  - Prefetch: files designed to speed up the execution of processes. Contain DLLs used, how many times the executable run (in <W10), timestamp, etc.
  - RFC: process creation data stored by ProgramDataUpdater.
  - CCM: SCCM Software Metering history reflects executions.
help_section: windows
jobs:
    windows.prefetch_aux outdir={outdir} path="{mountdir}/p*/[Ww]indows/[Pp]refetch"
    windows.rfc_aux outdir={outdir} path="{mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Aa]pp[Cc]ompat/[Pp]rograms/RecentFileCache.bcf"
    windows.ccm_aux outdir={outdir} path="{mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]bem/[Rr]epository"
default_params: {
  'outdir':'${plugins.windows.RVT_exec.Prefetch:outdir}',
  'mountdir':'${mountdir}'}
params_help: {
  'outdir':'path to directory where generated files will be stored'}

[windows.prefetch_aux]
modules:
  base.directory.GlobFilter ftype='directory'
  plugins.windows.RVT_exec.Prefetch outdir="{outdir}"
outdir: ${plugins.windows:execdir}
default_params: {'outdir':'{outdir}'}

[windows.rfc_aux]
modules:
  base.directory.GlobFilter ftype='file'
  plugins.windows.RVT_exec.RFC outdir="{outdir}"
outdir: ${plugins.windows:execdir}
default_params: {'outdir':'{outdir}'}

[windows.ccm_aux]
modules:
  base.directory.GlobFilter ftype='directory'
  plugins.windows.RVT_exec.CCM
outdir: ${plugins.windows.RVT_exec.CCM:outdir}
default_params: {'outdir':'{outdir}'}

[windows.prefetch]
description: Extract and parse Windows artifacts related with applications execution (Prefetch)
help_section: windows
modules:
  plugins.windows.RVT_exec.Prefetch outdir={outdir} volume_id={volume_id}
default_params: {
  'outdir':'${plugins.windows.RVT_exec.Prefetch:outdir}',
  'volume_id': ''}
params_help: {'path':'path to directory containing pf files',
  'outdir':'path to directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03'}
path: ${mountdir}/p01/Windows/Prefetch

[windows.rfc]
description: Extract and parse Windows artifacts related with applications execution (RFC)
help_section: windows
modules:
  plugins.windows.RVT_exec.RFC outdir={outdir} volume_id={volume_id}
default_params: {
  'outdir':'${plugins.windows.RVT_exec.RFC:outdir}',
  'volume_id': ''}
params_help: {'path':'path to RecentFileCache.bcf file ',
  'outdir':'path to directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03'}

[windows.CCM]
description: Extracts SCCM Software Metering history to get more information about executions
    The path is the absolute location of Windows/System32/wbem/Repository folder.
help_section: windows
modules:
    windows.RVT_exec.CCM outdir={outdir} volume_id={volume_id}
default_params: {
  'outdir':'${plugins.windows.RVT_exec.CCM:outdir}',
  'volume_id': ''}
params_help: {'path':'absolute path Windows/System32/wbem/Repository directory',
  'outdir':'path to directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03'}

[windows.activities_cache]
description: Parse ActivitiesCache database.
  Provide a globpath to any ActivitiesCache.db as path
help_section: windows
jobs:
  windows.activities_cache_main outdir={outdir} volume_id={volume_id}
  windows.activities_cache_report outdir={outdir}
default_params: {
  'outdir':'${plugins.windows.RVT_activity_cache.ActivitiesCache:outdir}',
  'volume_id':''}
params_help: {'path':'glob pattern to any ActivitiesCache.db to be parsed',
  'outdir':'path to directory where generated files will be stored',
  'volume_id':'volume identifier, such as partition number. Caution: set this parameter only when a single input file is expected. Ex: p03'}
path: ${mountdir}/p*/Users/*/AppData/Local/ConnectedDevicesPlatform/*/ActivitiesCache.db

[windows.activities_cache_main]
description: Parse ActivitiesCache database.
modules:
  base.directory.GlobFilter ftype='file'
  plugins.windows.RVT_activity_cache.ActivitiesCache outdir={outdir}
default_params: {
  'outdir':'${plugins.windows.RVT_activity_cache.ActivitiesCache:outdir}',
  'volume_id':''}
params_help: {'path':'glob pattern to any ActivitiesCache.db to be parsed',
  'outdir':'path to directory where generated files will be stored',
  'volume_id':'volume identifier, such as partition number. Caution: set this parameter only when a single input file is expected. Ex: p03'}
path: ${mountdir}/p*/Users/*/AppData/Local/ConnectedDevicesPlatform/*/ActivitiesCache.db

[windows.activities_cache_report]
description: Generates a summary file with all ActivitiesCache files sources.
modules:
  plugins.windows.RVT_activity_cache.ActivitiesCacheAnalysis outfile={outfile}
default_params: {
  'outfile':'${plugins.windows.RVT_activity_cache.ActivitiesCacheAnalysis:outdir}/activitiescache.csv',
  'path':'${path}'}
path: ${plugins.windows.RVT_activity_cache.ActivitiesCache:outdir}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;; REGISTRY HIVES

[windows.autorip]
description: Extracts an extensive set of keys from Windows Registry hives. Results are organized according to its information type.
  Expects a directory containing hives as an argument. `NTUSER.DAT` and `usrclass.dat` hives are expected to be stored in a username folder inside the directory set as path.
  The list of regripper modules, its description and output file can be found at: `${ripplugins}`

help_section: windows
modules:
    plugins.windows.RVT_autorip.Autorip ripplugins={ripplugins} pluginshives={pluginshives} errorfile={errorfile} outdir={outdir}
ripplugins: ${plugins.windows.RVT_autorip.Autorip:ripplugins}
pluginshives: ${plugins.windows.RVT_autorip.Autorip:pluginshives}
errorfile: ${plugins.windows.RVT_autorip.Autorip:errorfile}
default_params: {
  'ripplugins':'${ripplugins}',
  'pluginshives':'${pluginshives}',
  'errorfile':'${errorfile}',
  'volume_id':'p01',
  'outdir':'${plugins.windows.RVT_autorip.Autorip:outdir}'}
params_help: {
  'outdir':'path to directory where generated files will be stored',
  'ripplugins':'path to json file containing the organized list of regripper plugins to run',
  'pluginshives':'path to json file associating each regripper plugin with a list of hives',
  'errorfile':'path to log file to register regripper errors',
  'volume_id': 'volume identifier, such as partition number. Ex: p03'}

[windows.registry_hives]
description: Extracts an extensive set of keys from Windows Registry hives. Results are organized according to its information type.
  This job takes the default configuration of mounted devices as base to locate hive files to parse.
  Alternatively, you can provide a directory containing hives as an argument. `NTUSER.DAT` and `usrclass.dat` hives are expected to be stored in a username folder inside the directory set as path.

  Some of the artifacts are:

  - Shellbags: Shellbag information is available only for folders that have been opened and closed in Windows Explorer at least once.
    The existence of a Shellbag sub-key for a given directory indicates that the specific user account once visited that folder.
  - Jumplists: Recent documents in a program that is pinned to your taskbar.
  - Recentdocs: Recent documents, as listed in the registry. They may or not may be the same than the jumplist. They are used (but not only) in Microsoft Office.
  - Shimcache: tracks compatibilities issues with executed programs: path, size, last modified time, last updated time, process execution flag
  - Amcache: stores information about executed programs: path, executed time, deleted time, first installation

help_section: windows
modules:
  base.mutations.ForEach run_job=windows.registry_split
  base.mutations.SetFields fields='{{{{"volume_id":"{{filename}}"}}}}'
  base.mutations.CommonFields
  base.directory.GlobFilter ftype='directory' recursive=False
  base.mutations.MirrorOptions include_section=True relative_path=False
path: ${mountdir}/p*
ripplugins: ${plugins.windows.RVT_autorip.Autorip:ripplugins}
pluginshives: ${plugins.windows.RVT_autorip.Autorip:pluginshives}
errorfile: ${plugins.windows.RVT_autorip.Autorip:errorfile}
default_params: {
  'ripplugins':'${ripplugins}',
  'pluginshives':'${pluginshives}',
  'errorfile': '${errorfile}',
  'outdir':'${plugins.windows.RVT_autorip.Autorip:outdir}',
  'volume_id': '',
  'casedir': '${casedir}'}
params_help: {
  'path':'absolute path to folder containing hives',
  'outdir':'path to directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03',
  'ripplugins':'path to json file containing the organized list of regripper plugins to run',
  'pluginshives':'path to json file associating each regripper plugin with a list of hives',
  'errorfile':'path to log file to register regripper errors'}

[windows.registry_split]
jobs:
  base.directory.GlobClear target="{hives_outdir}/all_registry*.json" ftype="file"
  windows.autorip_analyze path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig" volume_id="{volume_id}"
  windows.autorip_analyze path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Aa]pp[Cc]ompat/[Pp]rograms" volume_id="{volume_id}"
  windows.autorip_analyze path="{path}/Users" volume_id="{volume_id}"
  windows.autorip_analyze path="{path}/[Dd]ocuments\ [Aa]nd\ [Ss]ettings" volume_id="{volume_id}"
  windows.autorip_analyze path="{path}/[Ss]ystem\ [Vv]olume\ [Ii]nformation" volume_id="{volume_id}"
  windows.amcache path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Aa]pp[Cc]ompat/[Pp]rograms/[Aa]mcache.hve" volume_id="{volume_id}"
  windows.shimcache path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig/[Ss][Yy][Ss][Tt][Ee][Mm]" volume_id="{volume_id}"
  windows.syscache path="{path}/[Ss]ystem\ [Vv]olume\ [Ii]nformation/[Ss]ys[Cc]ache.hve" volume_id="{volume_id}"
  windows.appcompatcache path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig/[Ss][Yy][Ss][Tt][Ee][Mm]" volume_id="{volume_id}"
  windows.registry.autorun path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig" volume_id="{volume_id}"
  windows.registry.autorun path="{path}/Users" volume_id="{volume_id}"
  windows.registry.tasks path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig/SOFTWARE" volume_id="{volume_id}"
  windows.registry.services path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig/SYSTEM" volume_id="{volume_id}"
  windows.userassist path="{path}/Users" volume_id="{volume_id}"
  windows.userassist_report path="{hives_outdir}"
  windows.shellbags path="{path}/Users" volume_id="{volume_id}"
  windows.shellbags_report path="{hives_outdir}"
  windows.registry_dump path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig" volume_id="{volume_id}"
  windows.registry_dump path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Aa]pp[Cc]ompat/[Pp]rograms" volume_id="{volume_id}"
  windows.registry_dump path="{path}/Users" volume_id="{volume_id}"
  windows.registry_dump path="{path}/[Ddocuments]\ [Aa]nd\ [Ss]ettings" volume_id="{volume_id}"
  windows.registry_dump path="{path}/[Ss]ystem\ [Vv]olume\ [Ii]nformation" volume_id="{volume_id}"
default_params: {
  'hives_outdir':'${plugins.windows.RVT_hives.UserAssist:outdir}'}

[windows.autorip_analyze]
modules:
  base.directory.GlobFilter ftype='directory'
  plugins.windows.RVT_autorip.Autorip volume_id="{volume_id}"

[windows.old_evt]
cascade:
  base.input.CSVReader delimiter='|' encoding='latin-1' fieldnames="@timestamp extension host user_id message"
  base.mutations.DateFields fields='@timestamp'
  base.mutations.GetFields fields='@timestamp extension host user_id message'
  base.output.CSVSink outfile='{outfile}' file_exists=APPEND
default_params: {
  'outfile':'${plugins.windows.RVT_hives.AllKeys:outdir}/evt_parsed.csv'}
params_help: {
  'outfile': 'file where results will be saved'}
path: 

[windows.registry_dump_all]
description: Parse all keys from all registry hives in a source. Outputs a json in ECS format. Deletes previous `all_registry` output files.
help_section: windows
modules:
  base.mutations.ForEach run_job=windows.registry_dump_split
  base.mutations.SetFields fields='{{{{"volume_id":"{{filename}}"}}}}'
  base.mutations.CommonFields
  base.directory.GlobFilter ftype='directory' recursive=False
  base.mutations.MirrorOptions include_section=True relative_path=False
path: ${mountdir}/p*
default_params: {
  'outdir':'${plugins.windows.RVT_hives.AllKeys:outdir}',
  'volume_id': '',
  'casedir': '${casedir}'}
params_help: {
  'path':'absolute path to folder containing hives',
  'outdir':'path to directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03'}

[windows.registry_dump_split]
jobs:
  base.directory.GlobClear target="{hives_outdir}/all_registry*.json" ftype="file"
  windows.registry_dump path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig" volume_id="{volume_id}"
  windows.registry_dump path="{path}/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Aa]pp[Cc]ompat/[Pp]rograms" volume_id="{volume_id}"
  windows.registry_dump path="{path}/Users" volume_id="{volume_id}"
  windows.registry_dump path="{path}/[Ddocuments]\ [Aa]nd\ [Ss]ettings" volume_id="{volume_id}"
  windows.registry_dump path="{path}/[Ss]ystem\ [Vv]olume\ [Ii]nformation" volume_id="{volume_id}"
default_params: {
  'hives_outdir':'${plugins.windows.RVT_hives.AllKeys:outdir}'}

[windows.registry_dump]
description: Parse all registry keys-values from a hive in ECS format

  Insert the path to either the file hive (ex: `SOFTWARE`) or the directory (`System32/Config`) as a parameter. In the latter case, all file hives in the directory will be processed.

help_section: windows
modules:
  base.directory.GlobFilter ftype='all'
  plugins.windows.RVT_hives.AllKeys volume_id="{volume_id}" outdir={outdir}
default_params: {
  'outdir':'${plugins.windows.RVT_hives.AllKeys:outdir}',
  'volume_id':''}
params_help: {
  'outdir': 'directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03'}
path: 

[windows.amcache]
description: Parse AmCache hive
help_section: windows
modules:
  base.directory.GlobFilter ftype='file'
  plugins.windows.RVT_hives.AmCache volume_id="{volume_id}" outdir={outdir}
default_params: {
  'outdir':'${plugins.windows.RVT_hives.AmCache:outdir}',
  'volume_id':'',
  'max_days': '90'}
params_help: {
  'outdir': 'directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03',
  'max_days': 'if a binary was executed in less than this number of days since today, check against search engines if the hash is malicious.'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Aa]pp[Cc]ompat/[Pp]rograms/[Aa]mcache.hve

[windows.shimcache]
description: Parse ShimCache hive
help_section: windows
modules:
  base.directory.GlobFilter ftype='file'
  plugins.windows.RVT_hives.ShimCache volume_id="{volume_id}" outdir={outdir}
default_params: {
  'outdir':'${plugins.windows.RVT_hives.ShimCache:outdir}',
  'volume_id':''}
params_help: {
  'outdir': 'directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig/[Ss][Yy][Ss][Tt][Ee][Mm]

[windows.syscache]
description: Parse SysCache hive
help_section: windows
modules:
  base.directory.GlobFilter ftype='file'
  plugins.windows.RVT_hives.SysCache volume_id="{volume_id}" outdir={outdir}
default_params: {
  'outdir':'${plugins.windows.RVT_hives.SysCache:outdir}',
  'volume_id':'',
  'max_days':'90'}
params_help: {
  'outdir': 'directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03',
  'max_days': 'if a binary was executed in less than this number of days since today, check against search engines if the hash is malicious.'}
path: ${mountdir}/p*/[Ss]ystem\ [Vv]olume\ [Ii]nformation/[Ss]ys[Cc]ache.hve

[windows.appcompatcache]
description: Parse AppcompatCache from SYSTEM registry hive
  Choose between using regripper or AppCompatCacheParser.exe to parse appcompatcache

  - Regripper appcompat plugin. Recommended configuration:
    - `cmd`: ``
  - AppCompatCacheParser.exe. Recommended configuration:
    - `cmd`: `{windows_tool} {executable} -f {path} --csv {outdir} --csvf {filename} --nl`

help_section: windows
modules:
  base.directory.GlobFilter ftype='file'
  plugins.windows.RVT_hives.AppCompat volume_id="{volume_id}" outdir={outdir} cmd="{cmd}" executable="{executable}"
default_params: {
  'outdir':'${plugins.windows.RVT_hives.AppCompat:outdir}',
  'volume_id':'',
  'cmd':'{windows_tool} {executable} -f {path} --csv {outdir} --csvf {filename} --nl',
  ;'cmd': '',
  'executable':'${plugins.windows:windows_tools_dir}/AppCompatCacheParser/AppCompatCacheParser.dll',
  'windows_tool': '${plugins.windows:dotnet_dir}/dotnet',
  'convert_paths': False}
params_help: {'path': 'path to SYSTEM registry hive',
  'outdir': 'directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03',
  'cmd':'External command to parse appcompat or empty to use internal parser. It is a Python string template accepting variables "windows_tool", "executable", "path", "outdir" and "filename". Variable "filename" is automatically set by the job. The rest are the same ones specified in parameters',
  'executable': 'path to the tool used to parse appcompatcache',
  'windows_tool': 'in a non Windows environment, path to the tool needed to run the executable, such as "wine" or "dotnet"',
  'convert_paths': 'convert paths to Windows format ("\\"). Necessary when using native Windows tools like `wine`'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig/[Ss][Yy][Ss][Tt][Ee][Mm]

[windows.userassist]
description: Parse userassist key in NTUSER.DAT hive. By default uses RECmd.exe to parse. Windows environment is needed to execute it.
  Expects a path to Windows `Users` directory as an argument, in order to search for any NTUSER.DAT hive.

help_section: windows
modules:
  base.directory.GlobFilter ftype='directory'
  plugins.windows.RVT_hives.UserAssist volume_id="{volume_id}" cmd="{cmd}" executable="{executable}" batch_file="{batch_file}"
default_params: {
  'outdir':'${plugins.windows.RVT_hives.UserAssist:outdir}',
  'volume_id':'p01',
  'cmd':'{windows_tool} {executable} --bn {batch_file} -f {hive} --csv {outdir} --csvf {filename} --nl',
  'executable':'${plugins.windows:windows_tools_dir}/RECmd/RECmd.dll',
  'batch_file':'${plugins.windows:windows_tools_dir}/RECmd/BatchExamples/BatchExampleUserAssist.reb',
  'windows_tool': '${plugins.windows:dotnet_dir}/dotnet',
  'convert_paths': False}
params_help: {
  'outdir':'path to directory where generated files will be stored',
  'volume_id':'volume identifier, such as partition number. Ex: p03',
  'cmd':'External command to parse userassist. It is a Python string template accepting variables "windows_tool", "executable", "hive", "outdir", "filename" and "batch_file". Variables "hive" and "filename" are automatically set by the job. The rest are the same ones specified in parameters',
  'executable':'path to the tool used to parse userassist',
  'batch_file':'configuration file for userassist using RECmd.exe',
  'windows_tool': 'in a non Windows environment, path to the tool needed to run the executable, such as "wine" or "dotnet"',
  'convert_paths': 'convert paths to Windows format ("\\"). Necessary when using native Windows tools like `wine`'}
path: ${mountdir}/p*/Users

[windows.userassist_report]
description: Generates a summary file with all userassist files sources.
help_section: windows
modules:
  plugins.windows.RVT_hives.UserAssistAnalysis outfile={outfile}
default_params: {'outfile':'${plugins.windows.RVT_hives.UserAssistAnalysis:outdir}/userassist.csv', 'path':'${path}'}
path: ${plugins.windows.RVT_hives.UserAssist:outdir}

[windows.registry.autorun]
description: Parse Registry Autorun keys
help_section: windows
modules:
  base.directory.GlobFilter ftype='directory'
  plugins.windows.RVT_hives.RunKeys volume_id="{volume_id}" outdir={outdir}
default_params: {
  'outdir':'${plugins.windows.RVT_hives.RunKeys:outdir}',
  'volume_id':''}
params_help: {
  'outdir': 'directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig

[windows.registry.services]
description: Parse Registry Services keys
help_section: windows
modules:
  base.directory.GlobFilter ftype='file'
  plugins.windows.RVT_hives.Services volume_id="{volume_id}" outdir={outdir}
default_params: {
  'outdir':'${plugins.windows.RVT_hives.Services:outdir}',
  'volume_id':''}
params_help: {
  'outdir': 'directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig/SYSTEM

[windows.registry.tasks]
description: Parse Registry TaskCache keys
help_section: windows
modules:
  base.directory.GlobFilter ftype='file'
  plugins.windows.RVT_hives.Tasks volume_id="{volume_id}" outdir={outdir}
default_params: {
  'outdir':'${plugins.windows.RVT_hives.Tasks:outdir}',
  'volume_id':''}
params_help: {
  'outdir': 'directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig/SOFTWARE

[windows.shellbags]
description: Parse Shellbags in NTUSER.DAT or usrclass.dat hives. By default uses SBECmd.exe to parse. Windows environment is needed to execute it.
  Expects a path to Windows `Users` directory as an argument, in order to search for any NTUSER.DAT hive.

help_section: windows
modules:
  base.directory.GlobFilter ftype='directory'
  plugins.windows.RVT_hives.Shellbags volume_id="{volume_id}" cmd="{cmd}" executable="{executable}"
default_params: {
  'outdir':'${plugins.windows.RVT_hives.Shellbags:outdir}',
  'volume_id':'p01',
  'cmd':'{windows_tool} {executable} -d {hives_dir} --csv {outdir} --nl --dedupe',
  'executable':'${plugins.windows:windows_tools_dir}/SBECmd/SBECmd.dll',
  'windows_tool': '${plugins.windows:dotnet_dir}/dotnet',
  'convert_paths': False}
params_help: {
  'outdir':'path to directory where generated files will be stored',
  'volume_id':'volume identifier, such as partition number. Ex: p03',
  'cmd':'External command to parse shellbags. It is a Python string template accepting variables "windows_tool", "executable", "hives_dir" and "outdir". Variable "hives_dir" is deduced by the job from "path". The rest are the same ones specified in parameters',
  'executable':'path to the tool used to parse shellbags',
  'windows_tool': 'in a non Windows environment, path to the tool needed to run the executable, such as "wine" or "dotnet"',
  'convert_paths': 'convert paths to Windows format ("\\"). Necessary when using native Windows tools like `wine`'}
path: ${mountdir}/p*/Users

[windows.shellbags_report]
description: Generates a summary file with all shellbags files sources.
help_section: windows
modules:
  plugins.windows.RVT_hives.ShellbagsAnalysis outfile={outfile}
default_params: {'outfile':'${plugins.windows.RVT_hives.ShellbagsAnalysis:outdir}/shellbags.csv', 'path':'${path}'}
path: ${plugins.windows.RVT_hives.Shellbags:outdir}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; EVENT LOGS

[windows.events.ParseEvts]
description: Parse Windows event files to get relevant events
    The path is the absolute location of the directory where evt files are located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvts
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
default_params: {'path':'${path}',
  'outfile':'${outfile}',
  'events_summary':'${plugins.windows.RVT_events.ParseEvts:events_summary}'}
params_help: {
  'path':'path to directory containing evt files',
  'outfile':'path where the generated file will be stored',
  'events_summary':'path where summary stats of events parsed will be collected'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig


[windows.events]
description: Parse Windows event files to get relevant logs events.

  Type `--params path=some_directory` to set a custom directory containing the log files to parse.
  Individual log files are expected to mantain the same name as Windows conventions.

    Files parsed:
     - Security
     - System
     - Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational
     - Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational
     - Microsoft-Windows-TerminalServices-RDPClient%4Operational
     - Microsoft-Windows-RemoteDesktopServices-RdpCoreTS%4Operational
     - Microsoft-Windows-TaskScheduler%4Operational
     - Microsoft-Windows-Bits-Client%4Operational
     - Microsoft-Windows-DriverFrameworks-UserMode%4Operational
     - Microsoft-Windows-WLAN-AutoConfig%4Operational
     - Application
     - OAlerts
     - Microsoft-Windows-User Profile Service%4Operational
     - Microsoft-Windows-Shell-Core%4Operational
     - Microsoft-Windows-Partition%4Diagnostic
     - Microsoft-Windows-Kernel-PnP%4Configuration
     - Microsoft-Windows-Ntfs%4Operational
     - Microsoft-Windows-Storage-ClassPnP%4Operational
     - Micrsoft-Windows-DeviceSetupManager%4Admin
     - Micrsoft-Windows-DeviceSetupManager%4Operational
     - Windows PowerShell
     - Microsoft-Windows-UAC-FileVirtualization%4Operational
     - Microsoft-Windows-Application-Experience%4Program-Telemetry
     - Microsoft-Windows-Application-Experience%4Program-Compatibility-Assistant
     - Microsoft-Windows-AppID%4Operational
help_section: windows
jobs:
    base.directory.DirectoryClear target="{outfile}"
    windows.events.Security outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.System outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.RDPRemote outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.RDPLocal outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.RDPClient outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.RDPCoreTS outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.Scheduled outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.Defender outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.Bits outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.Network outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.Application outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.SMBServer outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.USB outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.OAlerts outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.UserProfile outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.Run outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.PartitionDiagnostic outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.KernelPnp outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.NtfsOperational outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.StorageClassPnp outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.DeviceSetupManagerAdmin outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.DeviceSetupManagerOperational outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.PowerShell outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.PowerShellOperational outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.WMI outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.UACFileVirtualization outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.Compatibility-Assistant outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.Program-Telemetry outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.appID outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.ExtraLogs outfile="{outfile}" path="{path}" events_summary="{events_summary}"
    windows.events.ParseEvts outfile="{outfile}" path="{path_evt}" events_summary="{events_summary}"
outfile: ${plugins.windows:eventdir}/events.json
default_params: {'path':'${path}',
  'path_evt':'${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Cc]onfig',
  'outfile':'${outfile}',
  'events_summary':'${plugins.windows.RVT_events.EventJob:events_summary}'}
params_help: {
  'path':'path to directory containing evtx files',
  'path_evt':'path to directory containing evt files',
  'outfile':'path where the generated file will be stored',
  'events_summary':'path where summary stats of events parsed will be collected'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.Security]
description: Parse Windows Securty event file to get relevant logs events
    The path is the absolute location of the directory where Security.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.Security
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Security.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.System]
description: Parse Windows System event file to get relevant logs events
    The path is the absolute location of the directory where System.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.System
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/System.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.RDPRemote]
description: Parse Windows System event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.RDPLocal]
description: Parse Windows System event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.RDPLocal
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.RDPClient]
description: Parse Windows System event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-TerminalServices-RDPClient%4Operational.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.RDPClient
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-TerminalServices-RDPClient%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.Application]
description: Parse Windows Application event file to get relevant logs events
    The path is the absolute location of the directory where Application.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.Application
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Application.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.SMBServer]
description: Parse Windows System event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-SMBServer%4Security.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.SMBServer
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-SMBServer%4Security.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.RDPCoreTS]
description: Parse Windows event files to get relevant RDPCoreTS logs events
    The path is the absolute location of the directory where Microsoft-Windows-RemoteDesktopServices-RdpCoreTS%4Operational.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-RemoteDesktopServices-RdpCoreTS%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.Scheduled]
description: Parse Windows scheduled tasks logs events
    The path is the absolute location of the directory where Microsoft-Windows-TaskScheduler%4Operational.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-TaskScheduler%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.Bits]
description: Parse Windows event files to get relevant scheduled tasks logs events
    The path is the absolute location of the directory where Microsoft-Windows-Bits-Client%4Operational.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-Bits-Client%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.Defender]
description: Parse Windows event files to get relevant windows defender logs events
    The path is the absolute location of the directory where Microsoft-Windows-Windows Defender%4Operational.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-Windows Defender%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.Network]
description: Parse Windows event files to get relevant networking logs events
    The path is the absolute location of the directory where Microsoft-Windows-WLAN-AutoConfig%4Operational.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-WLAN-AutoConfig%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.USB]
description: Parse Windows event files to get relevant usb logs events
    The path is the absolute location of the directory where Microsoft-Windows-DriverFrameworks-UserMode%4Operational.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-DriverFrameworks-UserMode%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.UserProfile]
description: Parse Windows UserProfile event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-User Profile Service%4Operational file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-User Profile Service%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.Run]
description: Parse Windows Microsoft-Windows-Shell-Core%4Operational event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-Shell-Core%4Operational file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-Shell-Core%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.WMI]
description: Parse Windows Microsoft-Windows-WMI-Activity%4Operational event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-WMI-Activity%4Operational file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-WMI-Activity%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.OAlerts]
description: Parse Windows Microsoft Office Alerts event file to get relevant logs events
    The path is the absolute location of the directory where OAlerts.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.OAlerts
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/OAlerts.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.PartitionDiagnostic]
description: Parse Windows Microsoft-Windows-Partition%4Diagnostic event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-Partition%4Diagnostic file is located.
help_section: windows
cascade:
    windows.RVT_events.PartitionDiagnostic
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-Partition%4Diagnostic.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.KernelPnp]
description: Parse Windows Microsoft-Windows-Kernel-PnP%4Configuration event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-Kernel-PnP%4Configuration file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-Kernel-PnP%4Configuration.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.NtfsOperational]
description: Parse Windows Microsoft-Windows-Ntfs%4Operational event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-Ntfs%4Operational file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-Ntfs%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.StorageClassPnp]
description: Parse Windows Microsoft-Windows-Storage-ClassPnP%4Operational event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Storage-ClassPnP%4Operational file is located.
help_section: windows
cascade:
    windows.RVT_events.StorageClassPnp
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-Storage-ClassPnP%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.DeviceSetupManagerAdmin]
description: Parse Windows Microsoft-Windows-Micrsoft-Windows-DeviceSetupManager%4Admin event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-Micrsoft-Windows-DeviceSetupManager%4Admin file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-Micrsoft-Windows-DeviceSetupManager%4Admin.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.DeviceSetupManagerOperational]
description: Parse Windows Microsoft-Windows-Micrsoft-Windows-DeviceSetupManager%4Operational event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-Micrsoft-Windows-DeviceSetupManager%4Operational file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-Micrsoft-Windows-DeviceSetupManager%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.PowerShell]
description: Parse Windows PowerShell event file to get relevant logs events
    The path is the absolute location of the directory where "Windows PowerShell.evtx" file is located.
help_section: windows
cascade:
    windows.RVT_events.PowerShell
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Windows PowerShell.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.PowerShellOperational]
description: Parse Windows PowerShell Operational event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-PowerShell%4Operational.evtx file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-PowerShell%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.UACFileVirtualization]
description: Parse Windows Microsoft-Windows-UAC-FileVirtualization%4Operational event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-Micrsoft-Windows-DeviceSetupManager%4Admin file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-UAC-FileVirtualization%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.Compatibility-Assistant]
description: Parse Microsoft-Windows-Application-Experience%4Program-Compatibility-Assistant event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-Application-Experience%4Program-Compatibility-Assistant file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-Application-Experience%4Program-Compatibility-Assistant.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.Program-Telemetry]
description: Parse Microsoft-Windows-Application-Experience%4Program-Telemetry event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-Application-Experience%4Program-Telemetry file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-Application-Experience%4Program-Telemetry.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.appID]
description: Parse Microsoft-Windows-AppID%4Operational event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-AppID%4Operational file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-AppID%4Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.vhdmp]
description: Parse Microsoft-Windows-VHDMP%4Operational event file to get relevant logs events
    The path is the absolute location of the directory where Microsoft-Windows-VHDMP-Operational file is located.
help_section: windows
cascade:
    windows.RVT_events.ParseEvents
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/Microsoft-Windows-VHDMP-Operational.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.events.ExtraLogs]
description: Parse all event files not previously considered in other jobs
    The path is the absolute location of the directory where evtx files are.
help_section: windows
cascade:
    windows.RVT_events.ParseExtraLogs
    base.output.JSONSink outfile="{outfile}" file_exists=APPEND
    base.directory.GlobFilter ftype='directory'
outfile: ${plugins.windows:eventdir}/events.json
json_conf: ${windows:plugindir}/eventlist/ExtraLogs.json
default_params: {'outfile':'${outfile}'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ww]inevt/[Ll]ogs

[windows.eventartifacts]
description: Extracts Windows artifacts from event files. It is required to execute `windows.events` before this job
    Artifacts extraced:
     - Login, logoff
     - Poweron, poweroff
     - RDP connections
     - Wifi network artifacts
     - Shared objects
     - Winupdate events
     - Scheduled tasks
     - Installed processes and services
     - BITS
     - USB plugs
     - USB install drivers
     - Office Alerts
help_section: windows
jobs:
    windows.eventartifacts.logon_rdp path="{path}" outfile="{outdir}/rdp.csv"
    windows.eventartifacts.rdp_incoming path="{path}" outfile_csv="{outdir}/rdp_incoming.csv" outfile_md="{outdir}/rdp_incoming.md"
    windows.eventartifacts.rdp_outgoing path="{path}" outfile_csv="{outdir}/rdp_outgoing.csv" outfile_md="{outdir}/rdp_outgoing.md"
    windows.eventartifacts.rdp_gateway path="{path}" outfile_csv="{outdir}/rdp_gateway.csv" outfile_md="{outdir}/rdp_gateway.md"
    windows.eventartifacts.process_start path="{path}" outfile_csv="{outdir}/process_start.csv"
    windows.eventartifacts.cached_logon path="{path}" outfile="{outdir}/cachedlogin.csv"
    windows.eventartifacts.poweron path="{path}" outfile="{outdir}/power.csv"
    windows.eventartifacts.user_accounts path="{path}" outfile="{outdir}/user_accounts.csv"
    windows.eventartifacts.clearlog path="{path}" outfile="{outdir}/clearlog.csv"
    windows.eventartifacts.network path="{path}" outfile="{outdir}/network.csv"
    windows.eventartifacts.shares path="{path}" outfile="{outdir}/shares.csv"
    windows.eventartifacts.winupdate path="{path}" outfile="{outdir}/winupdate.csv"
    windows.eventartifacts.tgt path="{path}" outfile="{outdir}/text.txt"
    windows.eventartifacts.scheduled_tasks path="{path}" outfile="{outdir}/scheduled.csv"
    windows.eventartifacts.services path="{path}" outfile="{outdir}/services.csv"
    windows.eventartifacts.BITS path="{path}" outfile="{outdir}/bits.csv"
    windows.eventartifacts.Defender path="{path}" outfile="{outdir}/defender.csv"
    windows.eventartifacts.USB_plug path="{path}" outfile="{outdir}/usb_plugs.csv"
    windows.eventartifacts.USB_connections path="{path}" outfile="{outdir}/usb_connections.csv"
    windows.eventartifacts.USB_install path="{path}" outfile="{outdir}/usb_install.csv"
    windows.eventartifacts.run path="{path}" outfile="{outdir}/run.csv"
    windows.eventartifacts.appresolvercache path="{path}" outfile="{outdir}/appresolvercache.csv"
    windows.eventartifacts.SMB path="{path}" outfile="{outdir}/smb.csv"
    windows.eventartifacts.powershell path="{path}" outfile="{outdir}/ps.csv"
    windows.eventartifacts.DCOM path="{path}" outfile="{outdir}/dcomerror.csv"
    windows.eventartifacts.wer path="{path}" outfile="{outdir}/wererror.csv"
    windows.eventartifacts.msiinstaller path="{path}" outfile="{outdir}/msiinstaller.csv"
    windows.eventartifacts.USBPlugs2 path="{path}" outfile="{outdir}/usb_plugs2.csv" outfile_md="{outdir}/usb_plugs2.md" outfile_md2="{outdir}/usb_info.md"
    windows.eventartifacts.VolumeFree path="{path}" outfile="{outdir}/volume_free.csv"
    windows.eventartifacts.vpn_server path="{path}" outfile="{outdir}/vpn_server.csv"
    windows.eventartifacts.vpn_client path="{path}" outfile="{outdir}/vpn_client.csv"
path: ${plugins.windows:eventdir}/events.json
default_params: {'path':'${path}',
  'outdir':'${plugins.windows:eventsanalysisdir}'}
params_help: {'path':'path to json file gnerated by windows.events job',
  'outdir':'directory where resulting files will be stored'}

[windows.eventartifacts.logon_rdp]
description: Extract login and rdp artifacts
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_eventartifacts.LogonRDP outfile="{outfile}"
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="TimeCreated EventID Description LogonType LogonTypeStr LogonID SessionID ActivityID User TargetUser source.ip source.port ConnectionName ProcessName ConnType ReasonStr Logon.ProcessName AuthenticationPackageName client.hostname"
events_dict: {"21": "Microsoft-Windows-TerminalServices-LocalSessionManager", "23": "Microsoft-Windows-TerminalServices-LocalSessionManager", "24": "Microsoft-Windows-TerminalServices-LocalSessionManager", "25": "Microsoft-Windows-TerminalServices-LocalSessionManager", "39": "Microsoft-Windows-TerminalServices-LocalSessionManager", "40": "Microsoft-Windows-TerminalServices-LocalSessionManager", "65": "Microsoft-Windows-RemoteDesktopServices-RdpCoreTS", "66": "Microsoft-Windows-RemoteDesktopServices-RdpCoreTS", "102": "Microsoft-Windows-RemoteDesktopServices-RdpCoreTS", "131": "Microsoft-Windows-RemoteDesktopServices-RdpCoreTS", "140": "Microsoft-Windows-RemoteDesktopServices-RdpCoreTS", "1149": "Microsoft-Windows-TerminalServices-RemoteConnectionManager", "4624": "Microsoft-Windows-Security-Auditing", "4625": "Microsoft-Windows-Security-Auditing", "4634": "Microsoft-Windows-Security-Auditing", "4647": "Microsoft-Windows-Security-Auditing", "4648": "Microsoft-Windows-Security-Auditing", "4778": "Microsoft-Windows-Security-Auditing", "4779": "Microsoft-Windows-Security-Auditing"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/rdp.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.rdp_incoming]
description: Extract incoming RDP event logs
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_eventartifacts.RDPIncoming
    base.output.CSVSink outfile="{outfile_csv}" file_exists=OVERWRITE fieldnames="LoginDate LogoffDate User SourceAddress Comments"
    base.output.MDTableSink outfile="{outfile_md}" file_exists=OVERWRITE fieldnames="LoginDate LogoffDate User SourceAddress Comments"
events_dict: {"21": "Microsoft-Windows-TerminalServices-LocalSessionManager", "22": "Microsoft-Windows-TerminalServices-LocalSessionManager", "23": "Microsoft-Windows-TerminalServices-LocalSessionManager", "24": "Microsoft-Windows-TerminalServices-LocalSessionManager", "25": "Microsoft-Windows-TerminalServices-LocalSessionManager", "12": "Microsoft-Windows-Kernel-General", "13": "Microsoft-Windows-Kernel-General"}
default_params: {
  'outfile_csv':'${plugins.windows:eventsanalysisdir}/rdp_incoming.csv',
  'outfile_md':'${plugins.windows:eventsanalysisdir}/rdp_incoming.md'}
params_help: {
  'outfile_csv':'path where generated csv file will be stored',
  'outfile_md':'path where generated md table file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.rdp_gateway]
description: Extract incoming RDP event logs
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_eventartifacts.RDPGateway
    base.output.CSVSink outfile="{outfile_csv}" file_exists=OVERWRITE fieldnames="LoginDate LogoffDate User SourceAddress DestinationAddress SessionDuration Protocol"
    base.output.MDTableSink outfile="{outfile_md}" file_exists=OVERWRITE path_fields=User fieldnames="LoginDate LogoffDate User SourceAddress DestinationAddress SessionDuration Protocol"
events_dict: {"200": "Microsoft-Windows-TerminalServices-Gateway", "205": "Microsoft-Windows-TerminalServices-Gateway", "300": "Microsoft-Windows-TerminalServices-Gateway", "302": "Microsoft-Windows-TerminalServices-Gateway", "303": "Microsoft-Windows-TerminalServices-Gateway", "312": "Microsoft-Windows-TerminalServices-Gateway"}
default_params: {
  'outfile_csv':'${plugins.windows:eventsanalysisdir}/rdp_gateway.csv',
  'outfile_md':'${plugins.windows:eventsanalysisdir}/rdp_gateway.md'}
params_help: {
  'outfile_csv':'path where generated csv file will be stored',
  'outfile_md':'path where generated md table file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.rdp_outgoing]
description: Extract outgoing RDP event logs
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_eventartifacts.RDPOutgoing
    base.output.CSVSink outfile="{outfile_csv}" file_exists=OVERWRITE fieldnames="LoginDate LogoffDate Address User SID B64Hash"
    base.output.MDTableSink outfile="{outfile_md}" file_exists=OVERWRITE fieldnames="LoginDate LogoffDate Address User SID B64Hash"
events_dict: {"1024": "Microsoft-Windows-TerminalServices-ClientActiveXCore", "1025": "Microsoft-Windows-TerminalServices-ClientActiveXCore", "1026": "Microsoft-Windows-TerminalServices-ClientActiveXCore", "1029": "Microsoft-Windows-TerminalServices-ClientActiveXCore", "1102": "Microsoft-Windows-TerminalServices-ClientActiveXCore"}
default_params: {
  'outfile_csv':'${plugins.windows:eventsanalysisdir}/rdp_outgoing.csv',
  'outfile_md':'${plugins.windows:eventsanalysisdir}/rdp_outgoing.md'}
params_help: {
  'outfile_csv':'path where generated csv file will be stored',
  'outfile_md':'path where generated md table file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.process_start]
description: Display process execution started events
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "source.domain", "source.user.name", "process.name", "process.command_line", "destination.domain", "process.pid", "process.thread.id", "destination.user.name"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code source.domain source.user.name process.name process.command_line destination.domain destination.user.name process.pid process.thread.id"
events_dict: {"4688": "Microsoft-Windows-Security-Auditing"}
default_params: {
  'outfile':'${plugins.windows:eventsanalysisdir}/process_start.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.cached_logon]
description: Extract cached login artifacts
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "destination.user.name", "data.LastLoginLocalTime", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code destination.user.name data.LastLoginLocalTime message"
events_dict: {"45058": "LsaSrv"}
default_params: {
  'outfile': '${plugins.windows:eventsanalysisdir}/cachedlogin.csv'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.poweron]
description: Extract poweron poweroff artifacts
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_eventartifacts.Poweron
    base.mutations.GetFields fields='["TimeCreated", "EventID", "message", "ReasonStr"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="TimeCreated EventID message ReasonStr"
events_dict: {"1": "Microsoft-Windows-Power-Troubleshooter", "12": "Microsoft-Windows-Kernel-General", "13": "Microsoft-Windows-Kernel-General", "27": "Microsoft-Windows-Kernel-Boot", "41": "Microsoft-Windows-Kernel-Power", "42": "Microsoft-Windows-Kernel-Power", "1074": "USER32", "6005": "EventLog", "6006": "EventLog", "6008": "EventLog"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/power.json'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.user_accounts]
description: Extract events related to user account creation or modification
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "message", "destination.user.name", "destination.domain", "source.user.name", "source.domain"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code message destination.user.name destination.domain source.user.name source.domain"
events_dict: {"4720": "Microsoft-Windows-Security-Auditing", "4722": "Microsoft-Windows-Security-Auditing", "4724": "Microsoft-Windows-Security-Auditing", "4726": "Microsoft-Windows-Security-Auditing", "4728": "Microsoft-Windows-Security-Auditing", "4732": "Microsoft-Windows-Security-Auditing", "4738": "Microsoft-Windows-Security-Auditing", "4756": "Microsoft-Windows-Security-Auditing"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/user_accounts.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.network]
description: Extract network events
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_eventartifacts.Network outfile="{outfile}"
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="Created Code SSID BSSID ConnectionId ProfileName PHYType AuthenticationAlgorithm Reason"
events_dict: {"8000": "Microsoft-Windows-WLAN-AutoConfig", "8001": "Microsoft-Windows-WLAN-AutoConfig", "8003": "Microsoft-Windows-WLAN-AutoConfig", "11001": "Microsoft-Windows-WLAN-AutoConfig"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/network.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.mssql]
description: Extract mssql object events
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_eventartifacts.MSSQL outfile="{outfile}"
    base.mutations.GetFields fields='["event.created", "event.code", "message", "source.address", "destination.user.name", "reason"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code message source.address destination.user.name reason"
events_dict: {"17806": "MSSQLSERVER", "18456": "MSSQLSERVER"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/mssql.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.shares]
description: Extract shared object events
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "source.domain", "source.user.name", "data.ShareName", "data.updateTitle", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code source.domain source.user.name data.ShareName data.updateTitle message"
events_dict: {"5140": "Microsoft-Windows-Security-Auditing", "5145": "Microsoft-Windows-Security-Auditing"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/shares.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.winupdate]
description: Extract events related to Windows updates
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "data.updateTitle", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code data.updateTitle message"
events_dict: {"19": "Microsoft-Windows-WindowsUpdateClient", "20": "Microsoft-Windows-WindowsUpdateClient", "43": "Microsoft-Windows-WindowsUpdateClient", "44": "Microsoft-Windows-WindowsUpdateClient"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/winupdate.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.scheduled_tasks]
description: Extract install related events of processes and services
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "data.TaskName", "data.ActionName", "user.name", "data.ResultCode", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code data.TaskName data.ActionName user.name data.ResultCode message"
events_dict: {"106": "Microsoft-Windows-TaskScheduler", "129": "Microsoft-Windows-TaskScheduler", "140": "Microsoft-Windows-TaskScheduler","141": "Microsoft-Windows-TaskScheduler", "200": "Microsoft-Windows-TaskScheduler", "201": "Microsoft-Windows-TaskScheduler"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/scheduled.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.services]
description: Extract install related events of processes and services
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_os_info.GetUserFromSID sid_field='user.id' user_field='user.name' keep_sid=True
    base.mutations.GetFields fields='["event.created", "event.code", "service.name", "file.path", "service.type", "service.state", "service.previous_state", "event.data.FollowingAction", "source.user.name", "source.domain", "user.name", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE
events_dict: {"4697": "Microsoft-Windows-Security-Auditing", "7031": "Service Control Manager", "7034": "Service Control Manager", "7040": "Service Control Manager", "7045": "Service Control Manager"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/services.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.UserProfile]
description: Extract logon/logoff related events in UserProfile
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "user.id", "data.Session", "registry.key", "registry.hive", "data.LocalPath", "data.LogonType", "data.ActivityID", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code user.id data.Session registry.key registry.hive data.LocalPath data.LogonType data.ActivityID message"
events_dict: {"1": "Microsoft-Windows-User Profiles Service", "2": "Microsoft-Windows-User Profiles Service", "3": "Microsoft-Windows-User Profiles Service", "4": "Microsoft-Windows-User Profiles Service", "5": "Microsoft-Windows-User Profiles Service", "67": "Microsoft-Windows-User Profiles Service"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/user_profile.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.tgt]
description: extracts possible Kerberos tickets (TGT) attacks
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_eventartifacts.TGT_attack outfile="{outfile}"
    base.mutations.GetFields fields='["event.created", "event.code", "user.id", "data.Session", "registry.key", "registry.hive", "data.LocalPath", "data.LogonType", "data.ActivityID", "message"]'
events_dict: {"4768": "Microsoft-Windows-Security-Auditing", "4769": "Microsoft-Windows-Security-Auditing", "4770": "Microsoft-Windows-Security-Auditing"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/text.txt'}
params_help: {'outfile':'path where generated txt file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.clearlog]
description: Extract clear log events
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "source.user.name", "source.domain", "log.file.path"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code source.user.name source.domain log.file.path"
events_dict: {"1102": "Microsoft-Windows-Eventlog", "104": "Microsoft-Windows-Eventlog"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/clearlog.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.run]
description: Extract autorun related events. Detecting process-cmdline of programs running from Run/RunOnce Auto startup locations using events Microsoft-Windows-Shell-Core/Operational EID 9707/9708
    Check: <https://blog.menasec.net/2019/02/threat-hunting-20-runrunonce-eid.html>
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_os_info.GetUserFromSID sid_field='user.id' user_field='user.name' keep_sid=True
    base.mutations.GetFields fields='["event.created", "event.code", "data.Command", "user.name", "user.id", "data.PID"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE
events_dict: {"9707": "Microsoft-Windows-Shell-Core", "9708": "Microsoft-Windows-Shell-Core"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/run.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.appresolvercache]
description: Extract events triggered when a shortcut is added to the “App Resolver Cache”. Indicates when an application is installed
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_os_info.GetUserFromSID sid_field='user.id' user_field='user.name' keep_sid=True
    base.mutations.GetFields fields='["event.created", "data.Name", "data.AppID", "user.name"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE
events_dict: {"28115": "Microsoft-Windows-Shell-Core"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/appresolvercache.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.SMB]
description: Extract SMB error events
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "source.address", "source.user.name", "data.ShareName", "data.SharePath", "data.SessionID", "data.Error", "data.namespace", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created source.address source.user.name data.ShareName data.SharePath data.SessionID data.Error data.namespace message"
events_dict: {"551": "Microsoft-Windows-SMBServer", "1006": "Microsoft-Windows-SMBServer"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/smb.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.BITS]
description: Extract BITS events
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "job.title", "job.owner", "data.Url", "data.FileTime", "data.FileLength", "data.TotalBytes", "data.TransferredBytes", "data.Proxy", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created job.title job.owner data.Url data.FileTime data.FileLength data.TotalBytes data.TransferredBytes data.Proxy message"
events_dict: {"3": "Microsoft-Windows-Bits-Client", "59": "Microsoft-Windows-Bits-Client", "60": "Microsoft-Windows-Bits-Client"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/bits.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.Defender]
description: Extract Windows Defender events
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "message", "data.threatname", "data.severity", "data.status", "process.name", "data.Path", "data.action", "data.error", "data.oldvalue", "data.newvalue", "data.SID"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code message data.threatname data.severity data.status process.name data.Path data.action data.error data.oldvalue data.newvalue data.SID"
events_dict: {"1013": "Microsoft-Windows-Windows Defender", "1116": "Microsoft-Windows-Windows Defender", "1117": "Microsoft-Windows-Windows Defender", "5000": "Microsoft-Windows-Windows Defender", "5001": "Microsoft-Windows-Windows Defender", "5007": "Microsoft-Windows-Windows Defender", "5010": "Microsoft-Windows-Windows Defender", "5012": "Microsoft-Windows-Windows Defender"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/defender.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.USB_plug]
description: Extract USB events
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_eventartifacts.USB outfile="{outfile}"
    base.mutations.GetFields fields='["event.created", "event.code", "data.lifetime", "data.instance"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code data.lifetime data.instance"
events_dict: {"2003": "Microsoft-Windows-DriverFrameworks-UserMode", "2010": "Microsoft-Windows-DriverFrameworks-UserMode", "2100": "Microsoft-Windows-DriverFrameworks-UserMode", "2101": "Microsoft-Windows-DriverFrameworks-UserMode"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/usb_plugs.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.USBPlugs2]
description: Extract USB events related with partitions
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "message", "data.DeviceVendor", "data.DeviceModel", "data.DeviceID", "data.DeviceSerialNumber", "event.action", "data.capacity", "data.DeviceVolumeName"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code message data.DeviceVendor data.DeviceModel data.DeviceID data.DeviceSerialNumber event.action data.capacity data.DeviceVolumeName"
    windows.RVT_eventartifacts.USBPlugs2 outfile="{outfile}_md"
    ;base.output.MDTableSink outfile="{outfile_md}" file_exists=OVERWRITE path_fields=DeviceID fieldnames="plugged_in plugged_off DeviceID"
events_dict: {"1006": "Microsoft-Windows-Partition", "145": "Microsoft-Windows-Ntfs"}
default_params: {
  'outfile':'${plugins.windows:eventsanalysisdir}/usb_plugs2.csv',
  'outfile_md':'${plugins.windows:eventsanalysisdir}/usb_plugs2.md',
  'outfile_md2':'${plugins.windows:eventsanalysisdir}/usb_info.md'}
params_help: {
  'outfile':'path where generated csv file will be stored',
  'outfile_md':'path where generated md table file will be stored',
  'outfile_md2':'path where generated md table file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.VolumeFree]
description: Extract Volume NTFS events related with free space
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "data.VolumeGuid", "data.DeviceVolumeName", "data.LowestFreeSpaceInBytes", "data.HighestFreeSpaceInBytes"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created data.VolumeGuid data.DeviceVolumeName data.LowestFreeSpaceInBytes data.HighestFreeSpaceInBytes"
events_dict: {"142": "Microsoft-Windows-Ntfs"}
default_params: {
  'outfile':'${plugins.windows:eventsanalysisdir}/volume_free.csv'}
params_help: {
  'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.USB_connections]
description: Extract USB connections events
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    windows.RVT_eventartifacts.USBConnections outfile="{outfile}"
    base.mutations.GetFields fields='["event.created", "event.code", "event.action", "data.DeviceID", "data.DeviceModel", "data.DeviceSerialNumber"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code event.action data.DeviceID data.DeviceModel data.DeviceSerialNumber"
events_dict: {"1006": "Microsoft-Windows-Partition", "507": "Microsoft-Windows-StorDiag"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/usb_connections.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.USB_install]
description: Extract USB installation events
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "data.DeviceID"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code data.DeviceID"
events_dict: {"20001": "Microsoft-Windows-UserPnp", "20003": "Microsoft-Windows-UserPnp", "10000": "Microsoft-Windows-DriverFrameworks-UserMode"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/usb_install.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.powershell]
description: Extract cached login artifacts
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "user.name", "file.path", "data.ScriptBlockId", "data.Command", "data.PreviousEngineState", "data.NewEngineState", "data.ScriptBlockText"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code user.name file.path data.ScriptBlockId data.Command data.PreviousEngineState data.NewEngineState data.ScriptBlockText"
events_dict: {"4104": "Microsoft-Windows-PowerShell", "400": "PowerShell", "600": "PowerShell", "800": "PowerShell"}
default_params: {
  'outfile': '${plugins.windows:eventsanalysisdir}/ps.csv'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.DCOM]
description: Extract DCOM connection errors
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "data.computer", "file.path", "message", "user.id", "data.Binary", "data.Text"]'
    base.mutations.DecodeFields fields='["data.Binary"]' new_fields='["data.Text"]' encoding='hexadecimal'
    base.mutations.GetFields fields='["event.created", "data.computer", "file.path", "message", "user.id", "data.Text"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created data.computer file.path user.id message data.Text"
events_dict: {"10028": "Microsoft-Windows-DistributedCOM"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/dcomerror.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.wer]
description: Extracts info about Windows Resource Protection
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "data.SID", "file.path", "process.name", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created file.path process.name data.SID message"
events_dict: {"5003": "Microsoft-Windows-UAC-FileVirtualization"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/wererror.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.msiinstaller]
description: Extracts info about Windows MsiInstaller
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "product.name", "product.version", "status", "error.message", "reason", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code product.name product.version status error.message reason message"
events_dict: {"1013": "MsiInstaller", "1029": "MsiInstaller", "1033": "MsiInstaller", "1034": "MsiInstaller", "1038": "MsiInstaller", "10005": "MsiInstaller", "11707": "MsiInstaller", "11708": "MsiInstaller"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/msiinstaller.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.compatibilityassistant]
description: Extracts info related with compatibility assistant and program telemetry
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "data.ExePath", "data.ResolverName", "data.FixName", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code data.ExePath data.ResolverName data.FixName message"
events_dict: {"17": "Microsoft-Windows-Program-Compatibility-Assistant", "500": "Microsoft-Windows-Application-Experience", "505": "Microsoft-Windows-Application-Experience"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/compatibilityassistant.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.appid]
description: Extracts info related with appID. It is related with existence of a program.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "file.path", "data.PublisherName", "data.Status", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created file.path data.PublisherName data.Status message"
events_dict: {"4004": "Microsoft-Windows-AppID"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/appid.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.vpn_server]
description: Extract vpn related events of server
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "destination.user", "source.ip", "destination.ip", "Port", "connection.name", "reasonStr", "reason", "message", "data.coID"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code destination.user source.ip destination.ip Port connection.name reasonStr reason message data.coID"
events_dict: {"20250": "RemoteAccess", "20253": "RemoteAccess", "20255": "RemoteAccess","20271": "RemoteAccess", "20272": "RemoteAccess", "20274": "RemoteAccess", "20275": "RemoteAccess"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/vpn_server.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.vpn_client]
description: Extract vpn related events of client
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "source.user", "connection", "connection.name", "message", "data.coID", "reasonStr"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code source.user connection connection.name message data.coID reasonStr"
events_dict: {"20220": "RasClient", "20221": "RasClient", "20222": "RasClient", "20223": "RasClient", "20224": "RasClient", "20225": "RasClient", "20226": "RasClient", "20227": "RasClient"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/vpn_client.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.legacy_services]
description: Extract install related events of processes and services
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "service.name", "file.path", "service.type", "service.state", "service.previous_state", "event.data.FollowingAction", "source.user.name", "source.domain", "user.id", "message"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code service.name file.path service.type service.state service.previous_state event.data.FollowingAction source.user.name source.domain user.id message"
events_dict: {"7031": "service control manager", "7034": "service control manager", "7040": "service control manager", "7045": "service control manager"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/services_legacy.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.eventartifacts.legacy_logon]
description: Extract login and rdp artifacts
    The path is the absolute location of event.json file.
help_section: windows
cascade:
    base.input.JSONReader progress.disable="True"
    windows.RVT_eventartifacts.Filter_Events
    base.mutations.GetFields fields='["event.created", "event.code", "message", "LogonType", "TargetLogonId", "source.user.name", "source.domain", "destination.user.name", "destination.domain", "source.ip", "source.port", "process.name", "caller.process.name", "AuthenticationPackageName"]'
    base.output.CSVSink outfile="{outfile}" file_exists=OVERWRITE fieldnames="event.created event.code message LogonType TargetLogonId source.user.name source.domain destination.user.name destination.domain source.ip source.port process.name caller.process.name AuthenticationPackageName"
events_dict: {"528": "security", "529": "security", "530": "security", "531": "security", "532": "security", "533": "security", "534": "security", "535": "security", "536": "security", "537": "security", "538": "security", "539": "security", "540": "security", "551": "security", "552": "security"}
default_params: {'outfile':'${plugins.windows:eventsanalysisdir}/rdp_legacy.csv'}
params_help: {'outfile':'path where generated csv file will be stored'}
path: ${plugins.windows:eventdir}/events.json

[windows.events_global]
jobs:
    windows.events
    windows.eventartifacts

;;;;;;;;;;;;;;;;;;;;;;;; OTHER ARTIFACTS

[windows.scheduled_tasks_all]
description: Parse Task Scheduler Service artifacts such as SCHEDLGU.TXT and .job files
help_section: windows
jobs:
  base.directory.GlobClear target="{outdir}/jobs_files_*.csv" ftype="file"
  base.directory.GlobClear target="{outdir}/schedlgu_*.csv" ftype="file"
  base.directory.GlobClear target="{outdir}/tasks_*.json" ftype="file"
  base.directory.GlobClear target="{outdir}/tasks_*.csv" ftype="file"
  windows.scheduled_tasks outdir={outdir} path="{mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/Tasks"
  windows.scheduled_tasks outdir={outdir} path="{mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/Tasks"
  windows.scheduled_tasks outdir={outdir} path="{mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/Tasks_Migrated"
  windows.scheduled_tasks outdir={outdir} path="{mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ys[Ww]ow64/Tasks"
default_params: {
  'outdir':'${plugins.windows.RVT_hives.ScheduledTasks:outdir}',
  'mountdir':'${mountdir}'}
params_help: {
  'outdir': 'directory where generated files will be stored'}

[windows.scheduled_tasks]
description: Parse Task Scheduler Service artifacts such as SCHEDLGU.TXT and .job files
  Set the directory to search for such artifacts in `path`
help_section: windows
modules:
    base.directory.GlobFilter ftype='directory'
    plugins.windows.RVT_scheduled_tasks.ScheduledTasks outdir={outdir}
outdir: ${plugins.windows:execdir}
default_params: {
  'outdir':'${plugins.windows.RVT_hives.ScheduledTasks:outdir}',
  'volume_id': ''}
params_help: {
  'outdir': 'directory where generated files will be stored',
  'volume_id': 'volume identifier, such as partition number. Ex: p03'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/Tasks

[windows.recycle]
description: Parse files in (or deleted from) Windows Recycle Bin.
   You must generate the timeline with `fs_timeline` or `mft_timeline` before running the present job.
help_section: windows
modules:
  plugins.windows.RVT_recycle.Recycle vss={vss} outdir={outdir}
default_params: {'vss':False, 'outdir':'${plugins.windows.RVT_recycle.Recycle:outdir}'}
params_help: {
  'vss':'process Volume Shadow Snapshot',
  'outdir':'path to directory where generated files will be stored'}

[windows.srum]
description: Extract and parse SRUM (System Resource Utilization Monitor) from a windows OS

  SRUM collects statistics on execution of binaries: CPU, memory... It can be used to prove
  the execution of a program.
help_section: windows
modules:
  base.directory.GlobFilter ftype='file'
  plugins.windows.RVT_srum.Srum outdir={outdir} software_hive={software_hive}
default_params: {
  'outdir':'${plugins.windows.RVT_srum.Srum:outdir}',
  'software_hive': '${mountdir}/p*/[Ww]indows/[Ss]ystem32/[Cc]onfig/SOFTWARE'}
params_help: {
  'path': 'path to SRUDB.dat file to parse',
  'outdir':'path to directory where generated files will be stored',
  'software_hive': 'path, in glob format, to SOFTWARE hive'}
path: ${mountdir}/p*/[Ww][Ii][Nn][Dd][Oo][Ww][Ss]/[Ss]ystem32/[Ss]ru/SRUDB.[Dd][Aa][Tt]

[windows.usb]
description: Extracts USB drives data about drivers installation from setupapi.dev.log
  Expects a path to setupapi.dev.log file as argument.
  If no argument is provided, it will search on all allocated files mounted. Make sure to run `allocfiles` before this job if this is the case.
help_section: windows
modules:
    plugins.windows.RVT_usb.USBSetupAPI outdir={outdir}
default_params: {
  'outdir':'${plugins.windows.RVT_usb.USBSetupAPI:outdir}',
  'volume_id':''}
params_help: {'path':'path to setupapi.dev.log file. If not provided, the job will search in all allocated files',
  'outdir':'path to directory where generated files will be stored',
  'volume_id':'volume identifier, such as partition number. Ex: p03'}
path:

[windows.usnjrnl_all]
description: Parse all NTFS UsnJrnl files found in an image.
  UsnJrnl is the journal log of NTFS. You will find recent oprations on files: deletion, modification, renaming...

help_section: windows
modules:
    plugins.windows.RVT_UsnJrnl.UsnJrnl vss={vss} outdir={outdir} use_image='True'
default_params: {'vss':False,
  'outdir':'${plugins.windows.RVT_UsnJrnl.UsnJrnl:outdir}'}
params_help: {
  'vss':'process Volume Shadow Snapshot',
  'outdir':'path to directory where generated files will be stored'}

[windows.usnjrnl]
description: Parse NTFS UsnJrnl file, the journal log of NTFS. You will find recent oprations on files: deletion, modification, renaming...
help_section: windows
modules:
    plugins.windows.RVT_UsnJrnl.UsnJrnl vss={vss} outdir={outdir} use_image='False' volume_id={volume_id}
default_params: {'vss':False,
  'outdir':'${plugins.windows.RVT_UsnJrnl.UsnJrnl:outdir}',
  'volume_id':'p01'}
params_help: {
  'vss':'process Volume Shadow Snapshot',
  'outdir':'path to directory where generated files will be stored',
  'volume_id':'volume identifier, such as partition number. Ex: p03',}
path: ${mountdir}/p01/$$Extend/$$UsnJrnl:$$J

[windows.notifications]
description: Parse windows Notifications database
help_section: windows
modules:
    base.directory.GlobFilter ftype='file'
    plugins.windows.RVT_notifications.Notifications outdir={outdir}
default_params: {
    'outdir':'${plugins.windows.RVT_notifications.Notifications:outdir}'}
params_help: {'path':'path to wpndatabase.db file',
  'outdir':'path to directory where generated files will be stored'}
path: ${mountdir}/p*/Users/*/AppData/Local/Microsoft/Windows/Notifications/wpndatabase.db

[windows.bits]
description: Parse Background Intelligent Transfer Service (BITS). This is a service to transfer binaries between systems, used mainly by Microsoft Update and similar programs.
help_section: windows
modules:
    base.directory.GlobFilter ftype='file'
    plugins.windows.RVT_bits.Bits outdir={outdir}
default_params: {'outdir':'${plugins.windows.RVT_bits.Bits:outdir}'}
params_help: {'path':'path to qmgr0.dat file',
  'outdir':'path to directory where generated files will be stored'}
path: ${mountdir}/p*/ProgramData/Microsoft/Network/Downloader/qmgr0.dat

[windows.startup_folders]
description: Get filesystem information of files in Startup folders.
help_section: windows
modules:
  base.output.CSVSink outfile={outdir}/startup.csv file_exists=OVERWRITE
  base.input.CSVReader fieldnames='["Date","Size","Type","File Name"]' delimiter=',' is_file=False
  base.commands.Command cmd="rg -i ',...b,.*/Programs/Startup/.*FILE_NAME' {{path}} | rg -v '/desktop.ini' | cut -d ',' -f 1,2,3,8" run_before=False run_after=False run_and_yield=True
default_params: {'outdir':'${plugins.windows:persistencedir}'}
params_help: {'path':'path to timeline file',
  'outdir':'path to directory where generated files will be stored'}
path: ${outputdir}/timeline/${source}_TL.csv

;;;;;;;;;;;;;;;;;;;;;;; AV SERVICES

[windows.mplogs]
description: Parse Windows Defender MPLogs.
  Provide a globpath to mplogs folder in `ProgramData/Microsoft/Windows Defender/Support` as path
help_section: windows
modules:
  base.directory.GlobFilter ftype='directory'
  plugins.windows.RVT_mplogs.MPLog outdir='{outdir}'
default_params: {
  'outdir':'${plugins.windows.RVT_mplogs.MPLog:outdir}'}
params_help: {
  'path':'glob pattern to any mdb file in /ProgramData/Microsoft/Windows Defender/Support to be parsed',
  'outdir':'path to directory where generated files will be stored'}
path: "${mountdir}/p*/ProgramData/Microsoft/Windows Defender/Support"

[windows.quarantine]
description: Parse Windows quarantinefiles.
help_section: windows
jobs:
    allocfiles
    plugins.windows.RVT_quarantine.Quarantine outdir="{outdir}"
default_params: {'outdir':'${plugins.windows.RVT_quarantine.Quarantine:outdir}'}
params_help: {
  'outdir':'directory where the generated file will be stored'}
path:


;;;;;;;;;;;;;;;;;;;;;;; REMOTE CONTROL

[windows.remotedesktop]
description: Parse Windows remotedesktop logs of TeamViewer and Anydesk.
help_section: windows
jobs:
    windows.remotedesktop.teamviewer_inc_connections outdir="{outdir}"
    windows.remotedesktop.teamviewer_connections outdir="{outdir}"
    windows.remotedesktop.teamviewer_log_connections outdir="{outdir}"
    windows.remotedesktop.anydesk outdir="{outdir}" path="${mountdir}/p*/Users/*/AppData/Roaming/AnyDesk/**/ad*.trace"
    windows.remotedesktop.anydesk outdir="{outdir}" path="${mountdir}/p*/ProgramData/AnyDesk/**/*svc.trace"
    windows.remotedesktop.anydesk outdir="{outdir}" path="${mountdir}/p*/Documents and Settings/All Users/AnyDesk/**/ad*.trace"
default_params: {'outdir':'${plugins.windows.RVT_remotedesktop:outdir}'}
params_help: {
  'outdir':'directory where the generated file will be stored'}
path:

[windows.remotedesktop.teamviewer_inc_connections]
description: Parse teamviewer connections_incomming file
help_section: windows
modules:
    ;base.commands.Command cmd="echo '{fieldnames}'" stdout={outfile} run_before=True run_after=False delete_exists=True
    base.directory.GlobFilter ftype='file'
    base.output.CSVSink outfile="{outfile}" file_exists=APPEND write_header=False
    plugins.windows.RVT_remotedesktop.Teamviewer_connections outdir={outdir}
default_params: {
    'outdir':'${plugins.windows.RVT_remotedesktop.Teamviewer_inc_connections:outdir}',
    'outfile':'${plugins.windows.RVT_remotedesktop.Teamviewer_inc_connections:outfile}',
    'fieldnames':'startdate;enddate;teamviewer.hostname;id.connection;machine.hostname;mode;partition'}
params_help: {'path':'path to connections_incoming.txt file',
  'outdir':'path to directory where generated files will be stored'}
path: ${mountdir}/p*/Program\ Files\ *x86*/TeamViewer/Connections_incoming.txt

[windows.remotedesktop.teamviewer_connections]
description: Parse teamviewer connections_incomming file
help_section: windows
modules:
    ;base.commands.Command cmd="echo '{fieldnames}'" stdout={outfile} run_before=True run_after=False delete_exists=True
    base.directory.GlobFilter ftype='file'
    base.output.CSVSink outfile="{outfile}" file_exists=APPEND write_header=False
    plugins.windows.RVT_remotedesktop.Teamviewer_connections outdir={outdir}
default_params: {
    'outdir':'${plugins.windows.RVT_remotedesktop.Teamviewer_connections:outdir}',
    'outfile':'${plugins.windows.RVT_remotedesktop.Teamviewer_connections:outfile}',
    'fieldnames':'startdate;enddate;machine.hostname;id.connection;mode;partition;winuser'}
params_help: {'path':'path to connections_incoming.txt file',
  'outdir':'path to directory where generated files will be stored'}
path: ${mountdir}/p*/Users/*/AppData/Roaming/TeamViewer/Connections.txt

[windows.remotedesktop.teamviewer_log_connections]
description: Parse teamviewer connections_incomming file
help_section: windows
modules:
    ;base.commands.Command cmd="echo '{fieldnames}'" stdout={outfile} run_before=True run_after=False delete_exists=True
    base.directory.GlobFilter ftype='file'
    base.output.CSVSink outfile="{outfile}" file_exists=APPEND write_header=False
    plugins.windows.RVT_remotedesktop.Teamviewer_connections outdir={outdir}
default_params: {
    'outdir':'${plugins.windows.RVT_remotedesktop.Teamviewer_log_connections:outdir}',
    'outfile':'${plugins.windows.RVT_remotedesktop.Teamviewer_log_connections:outfile}',
    'fieldnames':'startdate;enddate;machine.hostname;id.connection;mode;partition;winuser'}
params_help: {'path':'path to connections_incoming.txt file',
  'outdir':'path to directory where generated files will be stored'}
path: ${mountdir}/p*/Users/*/AppData/Roaming/TeamViewer/Log*Connections.txt

[windows.remotedesktop.anydesk]
description: Parse teamviewer connections_incomming file
help_section: windows
modules:
    base.directory.GlobFilter ftype='file'
    plugins.windows.RVT_remotedesktop.Anydesk outdir={outdir}
default_params: {'outdir':'${plugins.windows.RVT_remotedesktop.Anydesk:outdir}'}
params_help: {'path':'path to ad.trace file',
  'outdir':'path to directory where generated files will be stored'}
path: ${mountdir}/p*/Users/*/AppData/Roaming/AnyDesk/*/ad*.trace

