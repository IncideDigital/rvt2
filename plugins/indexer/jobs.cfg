[indexer]
plugindir:
description.file: ${plugindir}/README.md

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Debugging

[indexer.parse_file]
description: Parse a file and show the result in the standard output. Use for debugging.
help_section: indexer
modules:
    base.mutations.DateFields
    base.directory.FileClassifier check_extension=False
    indexer.tikaparser.TikaParser

[indexer.parse_directory]
description: Parse a directory and show the result in the standard output. Use for debugging.
help_section: indexer
modules:
    base.mutations.DateFields
    base.directory.DirectoryFilter filter='{filter}'
    base.directory.FileClassifier check_extension=False
    indexer.tikaparser.TikaParser
default_params: {
    'filter':''}
params_help: {
    'filter': 'List of file categories to parse. If not provided, parse all files. Predefined categories can be found in "file_categories.cfg" configuration file'}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ElasticSearch

[indexer.directory]
description: Parse a directory and save in `${outfile}`. This file is compatible with indexers.
help_section: indexer
modules:
    base.output.JSONSink outfile='{outfile}' file_exists=APPEND
    indexer.elastic.ElasticSearchAdapter description="${source}" rvtindex="{rvtindex}" name="{name}"
    base.mutations.DateFields
    base.directory.DirectoryFilter restartable={restartable} filter='{filter}'
    base.directory.FileClassifier check_extension=False
    indexer.tikaparser.TikaParser
path: ${sourcedir}/mnt
outfile: ${outputdir}/indexer/${source}.json
name: ${indexer.elastic.ElasticSearchAdapter:name}
rvtindex: ${indexer.elastic.ElasticSearchAdapter:rvtindex}
default_params: {
    'outfile':'${outfile}',
    'name':'${name}',
    'rvtindex':'${rvtindex}',
    'restartable':'False',
    'filter':''}
params_help: {
    'path': 'The path to the directory to parse',
    'outfile': 'Save the result of the parsing in this file',
    'name': 'The name of the indice to save the parsed files',
    'rvtindex': 'The name of the indice to save metadata. Set to empty to not save metadata.',
    'restartable': 'If True, parsing can be restarted from the last error. Use with care!',
    'filter': 'List of file categories to parse. If not provided, parse all files. Predefined categories can be found in "file_categories.cfg" configuration file'}

[indexer.save]
description: Save a previously indexed database in an ElasticSearch server. Alternative to `elasticdump`.
help_section: indexer
jobs:
    indexer.elastic.ElasticSearchRegisterSource name={name} es_hosts="{es_hosts}"
    indexer.elastic.ElasticSearchBulkSender restartable={restartable} tag_fields="tags blindsearches" mapping="{mapping}" name={name} cooloff.every={cooloff_every} cooloff.seconds={cooloff_seconds} es_hosts="{es_hosts}"
mapping: ${indexer.elastic.ElasticSearchBulkSender:mapping}
name: ${indexer.elastic.ElasticSearchBulkSender:name}
path: ${outputdir}/indexer/${source}.json
es_hosts: ${indexer.elastic.ElasticSearchBulkSender:es_hosts}
default_params: {
    'restartable':'False',
    'mapping':'${mapping}',
    'name':'${name}',
    'cooloff_every':'300',
    'cooloff_seconds':'5',
    'es_hosts':'${es_hosts}'}
params_help: {
    'path': 'The path to a JSON file output from indexer.directory.',
    'restartable': 'In True, the index can be restarted from an error. Use with care!',
    'mapping': 'Path to the file describing the mapping of fields to ElasticSearch. The mapping can only be used when the index is created.',
    'name': 'Index name in ElasticSearch. If index does not exists, create it.',
    'cooloff_every': 'After this number of seconds, wait cooloff_seconds.',
    'cooloff_seconds': 'Seconds to wait to cool off ElasticSearch.',
    'es_hosts': 'List of space separated ElasticSearch servers. Use format "http(s?)://HOST:PORT".'}

[indexer.save_directory]
description: Run indexer.directory and then indexer.save with default parameters.
help_section: indexer
jobs:
    indexer.directory
    indexer.save

[indexer.convert_json]
description: Convert a JSON file to a JSON suitable to be sent to ElasticSearch using indexer.save
help_section: indexer
modules:
  base.output.JSONSink file_exists=OVERWRITE outfile='{outfile}'
  indexer.elastic.ElasticSearchAdapter operation=update name='{index_name}'
  base.mutations.CommonFields disabled={disableCommonFields} generate_id={generate_id}
  base.input.JSONReader
outfile: output.json
default_params: {
    'outfile':'${outfile}',
    'disableCommonFields':'True',
    'generate_id':'False',
    'index_name':'${source}'}
path:

[indexer.convert_csv]
description: Convert a CSV file to a JSON suitable to be sent to ElasticSearch using indexer.save

    * path: the CSV file to convert. It must be provided
    * output: configure outfile param. Default value: output.json
help_section: indexer
modules:
  base.output.JSONSink file_exists=OVERWRITE outfile='{outfile}'
  indexer.elastic.ElasticSearchAdapter operation=update
  base.mutations.CommonFields disabled={disableCommonFields} generate_id={generate_id}
  base.input.CSVReader delimiter='{delimiter}'
outfile: output.csv
default_params: {
    'outfile':'${outfile}',
    'delimiter':';',
    'disableCommonFields':'True',
    'generate_id':'False'}
path:

[indexer.query_and_tag]
description: Query elastic, select all related documents (containers, attachments..) and tag all of them. You must indexer.save the output
help_section: indexer
cascade:
    indexer.elastic.ElasticSearchQuery query='{query}' source_includes='containerid' max_results='{max_results}'
    indexer.elastic.ElasticSearchQueryRelated
    base.mutations.SetFields presets='{{"{tag_field}":"{tag}"}}'
    indexer.elastic.ElasticSearchAdapter operation=update
    base.output.JSONSink outfile="{outfile}"
outfile: ${indexer.directory:outfile}
max_results: ${indexer.elastic.ElasticSearchQuery:max_results}
default_params: {
    'outfile':'${outfile}',
    'query':'*','tag':'EXPORT',
    'tag_field':'tags-new',
    'max_results':'${max_results}'}
params_help: {
    'outfile': 'The output of the job. You must indexer.save this file',
    'query': 'The query to run',
    'tag': 'The name of the tag',
    'tag_field':'Save tags in this field. Use one of the registered tag fields in ElasticSearchBulkIndex (hints: tags-new or blindsearches-new)',
    'max_results': 'If the query will return more than this number of results, stop.'}

[indexer.export]
description: Query elastic, select all documents matching a query and export them to a JSON.
    The target JSON file must be saved to another ElasticSearch using `indexer.save`.
help_section: indexer
cascade:
    indexer.elastic.ElasticSearchQuery query="{query}" max_results=0
    indexer.elastic.ExportFiles outdir="{target}"
    indexer.elastic.ElasticSearchAdapter operation=update
    base.output.JSONSink outfile="{target}.json" file_exists=APPEND
target: export
default_params: {
    'query':'*',
    'target':'${target}'}
params_help: {
    'query': 'The query to run.',
    'target': 'The output wil be saved in file `target.json` and directory `target`.'}

[indexer.tag_and_export]
description: Runs `indexer.query_and_tag`, `indexer.save`, `indexer.export` and `indexer.save` to the remote ES.
help_section: indexer
jobs:
    ; query the original elastic, tag results and save in interfile
    indexer.query_and_tag query="{query}" tag="{tag}" outfile="{interfile}"
    ; index interfile in the original elatic, saving the tags
    indexer.save path="{interfile}" cooloff_seconds=15 cooloff_every=200
    ; export the results from the original elastic (both tagged documents and their related documents
    indexer.export query="tags:{tag}" target="{target}"
    ; save the export in the remote elastic
    indexer.save path="{target}.json" es_hosts="{es_export}"
interfile: original.json
target: exported
es_export: http://OVERWRITE:9200
default_params: {
    'interfile':'${interfile}',
    'query':'*','tag':'${target}',
    'target':'${target}',
    'es_export':'${es_export}'}
params_help: {
    'query': 'The query to run. See `indexer.query_and_tag`.',
    'tag': 'The name of the tag. See `indexer.query_and_tag`.',
    'target': 'The output wil be saved in file `target.json` and directory `target`. See `indexer.export`.',
    'es_export': 'The URL to the remote ES server. **You MUST overwrite this param**.'
    }

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;BlindSearches

[indexer.blind_searches]
description: Blind searches on a parsed JSON file, result from indexer.save.
help_section: indexer
modules:
  base.output.JSONSink file_exists=APPEND outfile='{outfile}'
  indexer.elastic.ElasticSearchAdapter operation=update
  indexer.blindsearches.BlindSearches
  base.commands.RegexFilter keyword_file='{keyword_file}'
outfile: ${outputdir}/indexer/${source}.blindsearches.json
default_params: {
    'keyword_file':'kw',
    'outfile':'${outfile}'}
params_help: {
    'keyword_file': 'The name of the keyword file in the searches directory.',
    'outfile': 'Save the results to this file, ready to be used with indexer.save'}
path: ${outputdir}/indexer/${source}.json

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Timeline

[indexer.index_timeline_body]
description: Index a BODY file provided in the path.
help_section: indexer
; note: the fields are according to the BODY documentation in https://wiki.sleuthkit.org/index.php?title=Body_file
; EXCEPT fls outputs changerecord and then birth, not the other way around
modules:
  base.output.JSONSink file_exists=APPEND outfile='{outfile}'
  indexer.elastic.ElasticSearchAdapter operation=update
  base.mutations.RemoveFields fields="embedded_path file_md5"
  base.mutations.DateFields
  base.mutations.CommonFields
  base.input.CSVReader delimiter="|" fieldnames="file_md5 path file_inode file_mode file_uid file_gid file_size file_access file_modified file_changerecord file_birth"
default_params: {'outfile':'${outputdir}/indexer/${source}.timeline.json'}
path: ${outputdir}/timeline/${source}_BODY.csv

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Mails

[indexer.pst]
description: Parse PST files previously exported with indexer.export_pst.
    This module also calls to indexer.pst.secondary.
help_section: indexer
modules:
    base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
    indexer.elastic.ElasticSearchAdapter
    indexer.export_pst.CreatePstHtml
    base.threads.Fork secondary_job=indexer.pst.secondary
    base.mutations.DateFields
    indexer.pstparser.MailParser
    base.input.CSVReader
path: ${plugins.common:mailsdir}/pstfiles.csv
outfile: ${outputdir}/indexer/${source}.pst.json
default_params: {
    'outfile':'${outfile}'}
params_help: {
    'outfile': 'A JSON file with all the information in the mailboxes, ready to be imported into ElasticSearch'}

[indexer.pst.secondary]
; a secondary thread to indexer.pst to save information about the emails in a CSV file
modules:
    base.output.CSVSink outfile='${analysisdir}/mail/mailbox.csv' quoting=0 file_exists=OVERWRITE
    indexer.pstparser.MailboxCSV

[indexer.export_pst]
description: Export contents of every pst or ost file found in a source using pffexport.
    This job depends on plugins.common and the succesful generation of alloc_files.
help_section: indexer
modules:
    base.output.CSVSink outfile={outfile} file_exists='OVERWRITE' quoting=1
    indexer.pstparser.ExportPst outdir='{outdir}'
outfile: ${plugins.common:mailsdir}/pstfiles.csv
outdir: ${indexer.pstparser.ExportPst:outdir}
default_params: {
    'outfile':'${outfile}',
    'outdir':'${outdir}'}
params_help: {
    'outfile':'A CSV containing the path to the actual pstfiles and their reference',
    'outdir': 'Export the contents of PST files to this directory'
    }

[indexer.mails]
description: Export, parse and characterize contents of every pst or ost file found in a source
help_section: indexer
jobs:
    indexer.export_pst
    indexer.pst
    characterize_mails

[indexer.pst_item2eml]
description: Convert a message extracted from a pst to an eml file.
  * path: the path to a Message folder
help_section: indexer
modules:
    indexer.export_pst.ExportPstEml

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Supertimeline events

[events.all]
description: Adapt any forensic source containing timestamped events to JSON format suitable for Elastic Common Schema (ECS). After this, you can save this file using events.save
help_section: events
jobs:
  events.timeline index_name='{index_name}'
  events.recentfiles index_name='{index_name}'
  events.browsers index_name='{index_name}'
  events.logs index_name='{index_name}'
  events.usb index_name='{index_name}'
  events.prefetch index_name='{index_name}'
  events.usnjrnl index_name='{index_name}'
  events.srum index_name='{index_name}'
  ; events.registry
default_params: {'index_name':'${ecs:es_index_name}'}
params_help: {'index_name': 'Name of the indice in ElasticSearch'}

[events.timeline]
description: Convert a BODY file to events. After this, you can save this file using events.save
help_section: events
cascade:
    base.input.CSVReader delimiter=| fieldnames="file_md5 path file_inode file_mode file_uid file_gid file_size file_access file_modified file_changerecord file_birth"
    indexer.events.Timeline include_filename={include_filename} classify={classify}
    plugins.indexer.elastic.ElasticSearchAdapter name='{index_name}'
    base.output.JSONSink outfile="{outfile}" file_exists=OVERWRITE
default_params: {
    'outfile':'${ecs:outdir}/${source}.fs_timeline.json',
    'index_name':'${ecs:es_index_name}',
    'include_filename':'${indexer.events.Timeline:include_filename}',
    'classify':'${indexer.events.Timeline:classify}'}
params_help: {
  'path': 'The path to a BODY file. This file can be created with `common.fs_timelines`.',
  'outfile': 'Path to the output event file.',
  'index_name': 'Name of the indice in ElasticSearch',
  'include_filename': 'If True, include FILENAME entries in the output.',
  'classify': 'If True, classify the files in the output.'}
path: ${plugins.common:timelinesdir}/${source}_BODY.csv

[events.recentfiles]
description: Convert lnk, jumplists and shellbags output files to an event file
help_section: events
modules:
    base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
    plugins.indexer.elastic.ElasticSearchAdapter name='{index_name}'
    indexer.events.RecentFiles classify={classify}
    base.input.CSVReader delimiter=";"
default_params: {
  'outfile':'${ecs:outdir}/${source}.recentfiles.json',
  'index_name':'${ecs:es_index_name}',
  'classify':'${indexer.events.RecentFiles:classify}'}
params_help: {
  'path': 'The path to the file generated by `windows.recentfiles`',
  'outfile': 'Path to the output event file.',
  'index_name': 'Name of the indice in ElasticSearch',
  'classify': 'If True, classify the files in the output.'}
path: ${plugins.common:recentanalysisdir}/recentfiles.csv

[events.browsers]
description: Convert browsers output files to events files
help_section: events
jobs:
  events.browsers.history outfile='{outfile_history}' index_name='{index_name}'
  events.browsers.cookies outfile='{outfile_cookies}' index_name='{index_name}'
default_params: {
  'outfile_history':'${ecs:outdir}/${source}.history.json',
  'outfile_cookies':'${ecs:outdir}/${source}.cookies.json',
  'index_name':'${ecs:es_index_name}'}
params_help: {
  'outfile_history': 'Path to the output event file for browsers history.',
  'outfile_cookies': 'Path to the output event file for browsers cookies.',
  'index_name': 'Name of the indice in ElasticSearch'}

[events.browsers.history]
modules:
  base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
  plugins.indexer.elastic.ElasticSearchAdapter name='{index_name}'
  indexer.events.BrowsersHistory classify=False
  base.input.JSONReader
default_params: {
  'outfile':'${ecs:outdir}/${source}.history.json',
  'index_name':'${ecs:es_index_name}'}
params_help: {
  'path': 'The path to the file generated by `common.browsers`',
  'outfile': 'Path to the output event file.',
  'index_name': 'Name of the indice in ElasticSearch'}
path: ${plugins.common:browsersdir}/history.json

[events.browsers.cookies]
modules:
  base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
  plugins.indexer.elastic.ElasticSearchAdapter name='{index_name}'
  indexer.events.BrowsersCookies classify=False
  base.input.JSONReader
default_params: {
  'outfile':'${ecs:outdir}/${source}.cookies.json',
  'index_name':'${ecs:es_index_name}'}
params_help: {
  'path': 'The path to the file generated by `common.browsers`',
  'outfile': 'Path to the output event file.',
  'index_name': 'Name of the indice in ElasticSearch'}
path: ${plugins.common:browsersdir}/cookies.json

[events.logs]
description: Convert Windows event logs to a format suitable for Elastic
help_section: events
modules:
  base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
  plugins.indexer.elastic.ElasticSearchAdapter name='{index_name}'
  indexer.events.EventLogs classify=False
  base.input.JSONReader
default_params: {
  'outfile':'${ecs:outdir}/${source}.event_logs.json',
  'index_name':'${ecs:es_index_name}'}
params_help: {
  'path': 'The path to the file generated by `windows.events`',
  'outfile': 'Path to the output event file.',
  'index_name': 'Name of the indice in ElasticSearch'}
path: ${plugins.windows:eventsanalysisdir}/events.json

[events.prefetch]
description: Convert prefetch output files to an event file
help_section: events
modules:
  base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
  plugins.indexer.elastic.ElasticSearchAdapter name='{index_name}'
  indexer.events.Prefetch classify=False
  base.directory.GlobFilter ftype='file'
  base.input.CSVReader
default_params: {
  'outfile':'${ecs:outdir}/${source}.prefetch.json',
  'index_name':'${ecs:es_index_name}'}
params_help: {
  'path': 'Glob pattern to find all files related to prefetch generated by `windows.exec`',
  'outfile': 'Path to the output event file.',
  'index_name': 'Name of the indice in ElasticSearch'}
path: ${plugins.windows:execdir}/prefetch_[!d]*

[events.usnjrnl]
description: Convert Windows UsnJrnl output files to an event file
help_section: events
modules:
  base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
  plugins.indexer.elastic.ElasticSearchAdapter name='{index_name}'
  indexer.events.UsnJrnl classify={classify}
  base.directory.GlobFilter ftype='file'
  base.input.CSVReader delimiter=";"
default_params: {
  'outfile':'${ecs:outdir}/${source}.usnjrnl.json',
  'index_name':'${ecs:es_index_name}',
  'classify':'${indexer.events.UsnJrnl:classify}'}
params_help: {
  'path': 'Glob pattern to find all files related to UsnJrnl generated by `windows.usnjrnl`',
  'outfile': 'Path to the output event file.',
  'index_name': 'Name of the indice in ElasticSearch',
  'classify': 'If True, classify the files in the output.'}
path: ${plugins.windows:journaldir}/UsnJrnl_[!d]*

[events.usb]
description: Convert USB setup.api output files to an event file
help_section: events
modules:
  base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
  plugins.indexer.elastic.ElasticSearchAdapter name='{index_name}'
  indexer.events.USB classify=False
  base.directory.GlobFilter ftype='file'
  base.input.CSVReader delimiter=";"
default_params: {
  'outfile':'${ecs:outdir}/${source}.usb.json',
  'index_name':'${ecs:es_index_name}'}
params_help: {
  'path': 'Glob pattern to find all files related to USB generated by `windows.usb`',
  'outfile': 'Path to the output event file.',
  'index_name': 'Name of the indice in ElasticSearch'}
path: ${plugins.windows:usbdir}/*setupapi.csv

[events.srum]
description: Convert SRUM Network Usage and Network Connection output files to event files
help_section: events
jobs:
  events.networkusage outfile='{outfile_usage}' index_name='{index_name}'
  events.networkconnections outfile='{outfile_connections}' index_name='{index_name}'
default_params: {
  'outfile_usage':'${ecs:outdir}/${source}.networkusage.json',
  'outfile_connections':'${ecs:outdir}/${source}.networkconnections.json',
  'index_name':'${ecs:es_index_name}'}
params_help: {
  'outfile_usage': 'Path to the output networkusage event file.',
  'outfile_connections': 'Path to the output networkconnections event file.',
  'index_name': 'Name of the indice in ElasticSearch'}

[events.networkusage]
modules:
  base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
  plugins.indexer.elastic.ElasticSearchAdapter name='{index_name}'
  indexer.events.NetworkUsage classify=False
  base.directory.GlobFilter ftype='file'
  base.input.CSVReader delimiter=";"
default_params: {
  'outfile':'${ecs:outdir}/${source}.networkusage.json',
  'index_name':'${ecs:es_index_name}'}
params_help: {
  'path': 'Glob pattern to find all files related to SRUM Network Usage generated by `windows.srum`',
  'outfile': 'Path to the output event file.',
  'index_name': 'Name of the indice in ElasticSearch'}
path: ${plugins.windows:srumdir}/*NetworkUsage*

[events.networkconnections]
modules:
  base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
  plugins.indexer.elastic.ElasticSearchAdapter name='{index_name}'
  indexer.events.NetworkConnections classify=False
  base.directory.GlobFilter ftype='file'
  base.input.CSVReader delimiter=";"
default_params: {
  'outfile':'${ecs:outdir}/${source}.networkconnections.json',
  'index_name':'${ecs:es_index_name}'}
params_help: {
  'path': 'Glob pattern to find all files related to SRUM Network Connections generated by `windows.srum`',
  'outfile': 'Path to the output event file.',
  'index_name': 'Name of the indice in ElasticSearch'}
path: ${plugins.windows:srumdir}/*NetworkConnections*

[events.registry]
description: Adapts Windows Registry to an ECS compatible format
help_section: events
modules:
  base.output.JSONSink outfile='{outfile}' file_exists=OVERWRITE
  plugins.indexer.elastic.ElasticSearchAdapter name='{index_name}'
  indexer.events.Registry classify=False
  base.directory.GlobFilter ftype='file'
  base.input.JSONReader
default_params: {
  'outfile':'${ecs:outdir}/${source}.registry.json',
  'index_name':'${ecs:es_index_name}'}
params_help: {
  'path': 'Glob pattern to find Windows Registry Dump json generated by `windows.registry`',
  'outfile': 'Path to the output event file.',
  'index_name': 'Name of the indice in ElasticSearch'}
path: ${plugins.windows:hivesdir}/registry_dump.json

[events.save]
description: Save all events generated by "events.all" to Elastic Supertimeline.
help_section: events
; inherits: indexer.save
modules:
    base.directory.GlobFilter ftype='file'
    indexer.elastic.ElasticSearchBulkSender restartable={restartable} tag_fields="tags blindsearches" mapping="{mapping}" name={name} cooloff.every={cooloff_every} cooloff.seconds={cooloff_seconds} es_hosts="{es_hosts}"
mapping: ${indexer:plugindir}/ecs-settings.json
name: ${ecs:es_index_name}
es_hosts: ${indexer.elastic.ElasticSearchBulkSender:es_hosts}
default_params: {
    'restartable':'False',
    'mapping':'${mapping}',
    'name':'${name}',
    'cooloff_every':'10000',
    'cooloff_seconds':'1',
    'es_hosts':'${es_hosts}'}
params_help: {
    'path': 'Glob pattern to find all events files previously generated.',
    'restartable': 'In True, the index can be restarted from an error. Use with care!',
    'mapping': 'Path to the file describing the mapping of fields to ElasticSearch. The mapping can only be used when the index is created.',
    'name': 'Index name in ElasticSearch. If index does not exists, create it. Must coincide with the index name defined in every json processed',
    'cooloff_every': 'After this number of seconds, wait cooloff_seconds.',
    'cooloff_seconds': 'Seconds to wait to cool off ElasticSearch.',
    'es_hosts': 'List of space separated ElasticSearch servers. Use format "http(s?)://HOST:PORT".'}
path: ${ecs:outdir}/${source}.*json
