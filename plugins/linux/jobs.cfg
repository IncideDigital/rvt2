[linux]
plugindir:
description: This plugin extracts and analyzes forensic artifacts from a Linux system.

[linux.artifacts]
inherits: plugins.common
description: Main set of forensic analysis jobs to run on Linux artifact files. It assumes they are located under `${mountdir}`
help_section: linux
jobs:
    linux.characterize
    linux.cron
    linux.ssh
    linux.login
    linux.bash
    linux.logs
    linux.packages
    linux.services
    linux.network
    linux.extrafiles
    browsers

[linux.forensics]
inherits: plugins.common
description: Main set of forensic analysis jobs to run on a disk image with a Linux distribution
help_section: linux
jobs:
    plugins.common.RVT_mount.Mount
    plugins.common.RVT_timelines.Timelines
    linux.characterize
    linux.cron
    linux.ssh
    linux.login
    linux.bash
    linux.logs
    linux.packages
    linux.services
    linux.network
    linux.extrafiles
    browsers

;;;;;;;;;;;;;;;;;;;;;;; CRON
[linux.cron]
inherits: plugins.linux
description: Parse cron files such as crontab, anacrontab and cronlogs.
  Results are stored under the directory `${plugins.linux.RVT_cron.Cron:outdir}` and the cron log at `${plugins.linux.RVT_cron.CronLog:outdir}`
help_section: linux
jobs:
    linux.cron.crontab
    linux.cron.anacrontab
    linux.cron.system
    linux.cron.user_specific
    linux.cron.cron_log

[linux.cron.crontab]
inherits: plugins.linux
description: Get the scheduled tasks or jobs of the crontab file.
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_cron.Cron
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_cron.Cron:outdir}/crontab.csv'}
path: ${mountdir}/p*/etc/crontab

[linux.cron.anacrontab]
inherits: plugins.linux
description: Get the scheduled tasks or jobs of the anacrontab file.
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_cron.AnacronTab
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_cron.AnacronTab:outdir}/anacrontab.csv'}
path: ${mountdir}/p*/etc/anacrontab

[linux.cron.system]
inherits: plugins.linux
description: Get the scheduled tasks or jobs of the cron.daily, cron.weekly, cron.hourly, cron.monthly, cron.d folder.
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_cron.Cron
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_cron.Cron:outdir}/cron.csv'}
path: ${mountdir}/p*/etc/cron.*/**

[linux.cron.user_specific]
inherits: plugins.linux
description: Get the scheduled tasks or jobs of the cron.daily, cron.weekly, cron.hourly, cron.monthly, cron.d folder.
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_cron.Cron
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_cron.Cron:outdir}/cron.csv'}
path: ${mountdir}/p*/var/**/*cron/**

[linux.cron.cron_log]
inherits: plugins.linux
description: Includes cron log file
jobs:
    linux.cron.cron_log.compressed
    linux.cron.cron_log.not_compressed

[linux.cron.cron_log.compressed]
inherits: plugins.linux
description: Parse cronlog compressed files
cascade:
  base.input.AllLinesInCompressedFile
  plugins.linux.RVT_cron.CronLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux.RVT_cron.CronLog:outdir}/cron.log.csv'}
path: ${mountdir}/p*/var/log/cron.log*

[linux.cron.cron_log.not_compressed]
inherits: plugins.linux
description: Parse cron not compressed files
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_cron.CronLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_cron.CronLog:outdir}/cron.log.csv'}
path: ${mountdir}/p*/var/log/cron.log*

;;;;;;;;;;;;;;;;;;;;;;; SSH
[linux.ssh]
inherits: plugins.linux
description: Includes files such as authorized_keys, known_hosts and config
  Results are stored under the directory `${plugins.linux:sshdir}`
help_section: linux
modules:
  plugins.common.RVT_files.SendAllocFiles
  ssh.FileParser
path: ${DEFAULT:mountdir}
 
[ssh.FileParser]
inherits = base.directory.FileParser
parsers = (.*/\\.ssh/authorized_keys$$) linux.ssh.authorized_keys
  (.*/\\.ssh/known_hosts$$) linux.ssh.known_hosts
  (.*/\\.?ssh/config$$) linux.ssh.config
  (.*/\\.?ssh/ssh.?_config$$) linux.ssh.config

[linux.ssh.authorized_keys]
inherits: plugins.linux
description: Get the ssh information from authorized_keys
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_ssh.SshAuthorizedKeys
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
default_params: {
  'outfile': '${plugins.linux.RVT_ssh.SshAuthorizedKeys:outdir}/authorized_keys.csv'
  }

[linux.ssh.known_hosts]
inherits: plugins.linux
description: Get the ssh information from known_hosts
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_ssh.SshKnownHosts 
  base.output.CSVSink outfile={outfile} 
default_params: {
  'outfile': '${plugins.linux.RVT_ssh.SshKnownHosts:outdir}/known_hosts.csv'
  }

[linux.ssh.config]
inherits: plugins.linux
description: Get the ssh information from config files
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_ssh.SshConfig
  base.output.JSONSink outfile={outfile} file_exists="APPEND" indent="4"
default_params: {
  'outfile': '${plugins.linux.RVT_ssh.SshConfig:outdir}/config.json'
  }

;;;;;;;;;;;;;;;;;;;;;;; LOGIN / ACCOUNT
[linux.login]
inherits: plugins.linux
description: Includes files such as shadow, passwd, nsswitch, wtmp, group, gshadow, sudoers:  login and accounts files
  Results are stored under the directory `${plugins.linux:logindir}` and a report at `${plugins.linux:ausers}`
help_section: linux
jobs:
    linux.login.output
    linux.login.output_sorted
    linux.login.analysis

[linux.login.output]
inherits: plugins.linux
modules:
  plugins.common.RVT_files.SendAllocFiles
  login.FileParser
path: ${DEFAULT:mountdir}
 
[login.FileParser]
inherits = base.directory.FileParser
parsers = (.*/etc/passwd) linux.login.passwd
  (.*/etc/shadow) linux.login.shadow
  (.*/etc/master\\.shadow) linux.login.shadow
  (.*/etc/group) linux.login.group
  (.*/etc/gshadow) linux.login.gshadow
  (.*/etc/nsswitch.conf) linux.login.nsswitch
  (.*/etc/security/access.conf) linux.login.access
  (.*/var/log/wtmp*) linux.login.wtmp
  (.*/var/log/wtmp*) linux.login.wtmp_last
  (.*/var/log/btmp*) linux.login.btmp
  (.*/var/log/lastlog) linux.login.lastlog
  (.*/etc/sudoers$$) linux.login.sudoers

[linux.login.passwd]
inherits: plugins.linux
description: Get the essential information about user accounts.
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_login.Passwd
  base.output.CSVSink outfile={outfile} file_exists="OVERWRITE"
default_params: {
  'outfile': '${plugins.linux.RVT_login.Passwd:outdir}/passwd.csv'
  }

[linux.login.shadow]
inherits: plugins.linux
description: Get the essential information about user passwords.
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_login.Shadow
  base.output.CSVSink outfile={outfile} file_exists="OVERWRITE"
default_params: {
  'outfile': '${plugins.linux.RVT_login.Shadow:outdir}/shadow.csv'
  }

[linux.login.group]
inherits: plugins.linux
description: Get the essential information about Groups.
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_login.Group
  base.output.CSVSink outfile={outfile} file_exists="OVERWRITE"
default_params: {
  'outfile': '${plugins.linux.RVT_login.Group:outdir}/group.csv'
  }

[linux.login.gshadow]
inherits: plugins.linux
description: Get the essential information about secure group account information.
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_login.Gshadow
  base.output.CSVSink outfile={outfile} file_exists="OVERWRITE"
default_params: {
  'outfile': '${plugins.linux.RVT_login.Gshadow:outdir}/group_secure.csv'
  }

[linux.login.lastlog]
inherits: plugins.linux
description: Get the essential information about Lastlog file.
cascade:
  plugins.linux.RVT_login.LastLog
  base.output.CSVSink outfile={outfile} file_exists="OVERWRITE"
default_params: {
  'outfile': '${plugins.linux.RVT_login.LastLog:outdir}/lastlog.csv'
  }

[linux.login.nsswitch]
inherits: plugins.linux
description: Get the information of nsswitch file.
cascade:
  base.input.AllLinesInFile progress.disable=True
  base.output.DummySink outfile={outfile} file_exists="OVERWRITE"
default_params: {
  'outfile': '${plugins.linux:logindir}/nsswitch.txt'
  }

[linux.login.access]
inherits: plugins.linux
description: Get the information of access.conf file.
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_login.Access
  base.output.CSVSink outfile={outfile} file_exists="OVERWRITE"
default_params: {
  'outfile': '${plugins.linux.RVT_login.Access:outdir}/access.csv'
  }

[linux.login.wtmp]
inherits: plugins.linux
description: Get the information of wtmp file.
cascade:
  plugins.linux.RVT_login.Utmpdump progress.disable=False
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
default_params: {
  'outfile': '${plugins.linux.RVT_login.Utmpdump:outdir}/wtmp_tmp.csv'
  }

[linux.login.wtmp_last]
inherits: plugins.linux
description: Get the information of wtmp file.
cascade:
  plugins.linux.RVT_login.Utmpdump2 progress.disable=False
  base.output.DummySink outfile={outfile} file_exists="APPEND"
default_params: {
  'outfile': '${plugins.linux.RVT_login.Utmpdump:outdir}/wtmp_row.txt'
  }

[linux.login.btmp]
inherits: plugins.linux
description: Get the information of btmp file.
cascade:
  plugins.linux.RVT_login.Utmpdump progress.disable=False
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
default_params: {
  'outfile': '${plugins.linux.RVT_login.Utmpdump:outdir}/btmp_tmp.csv'
  }

[linux.login.output_sorted]
inherits: plugins.linux
description: Job to sort wtmp and btmp files
jobs:
  linux.login.utmp.csv_to_sorted_csv path={infile_1} outfile={outfile_1}
  base.directory.DirectoryClear target={infile_1}
  linux.login.utmp.csv_to_sorted_csv path={infile_2} outfile={outfile_2}
  base.directory.DirectoryClear target={infile_2}
infile_1: ${plugins.linux.RVT_login.Utmpdump:outdir}/wtmp_tmp.csv
outfile_1: ${plugins.linux.RVT_login.Utmpdump:outdir}/wtmp.csv
infile_2: ${plugins.linux.RVT_login.Utmpdump:outdir}/btmp_tmp.csv
outfile_2: ${plugins.linux.RVT_login.Utmpdump:outdir}/btmp.csv
default_params: {
  'infile_1':'${infile_1}',
  'outfile_1':'${outfile_1}',
  'infile_2':'${infile_2}',
  'outfile_2':'${outfile_2}',
  }

[linux.login.utmp.csv_to_sorted_csv]
modules:
  base.output.CSVSink outfile={outfile} file_exists="OVERWRITE"
  base.mutations.SortResults fields="@timestamp"
  base.input.CSVReader progress.disable=True
default_params: {
  'outfile': '${plugins.linux.RVT_login.Utmpdump:outdir}/wtmp.csv',
  'path': '${plugins.linux.RVT_login.Utmpdump:outdir}/wtmp_tmp.csv'}
;path: ${path}

[linux.login.sudoers]
inherits: plugins.linux
description: Get the information of sudoers file.
cascade:
  base.input.AllLinesInFile progress.disable=True
  base.output.DummySink outfile={outfile} file_exists="OVERWRITE"
default_params: {
  'outfile': '${plugins.linux:logindir}/sudoers.txt'
  }

[linux.login.analysis]
inherits: plugins.linux
description: Make the analysis tables for the users and group
cascade:
  plugins.linux.RVT_login.Analysis

;;;;;;;;;;;;;;;;;;;;;;; BASH
[linux.bash]
inherits: plugins.linux
description: Includes files such as bashrc, bash_history, bash_logout, bash_profile, profile
  Results are stored under the directory `${plugins.linux:bashdir}`
help_section: linux
modules:
  plugins.common.RVT_files.SendAllocFiles
  bash.FileParser
path: ${DEFAULT:mountdir}
 
[bash.FileParser]
inherits = base.directory.FileParser
parsers = (.*/\\.bashrc$$) linux.bash.bash_files
  (.*/\\.bash_history$$) linux.bash.bash_history
  (.*/\\.history$$) linux.bash.bash_history
  (.*/\\.sh_history$$) linux.bash.bash_history
  (.*/\\.bash_logout$$) linux.bash.bash_files
  (.*/\\.bash_login$$) linux.bash.bash_files
  (.*/\\.bash_profile$$) linux.bash.bash_files
  (.*/\\.profile$$) linux.bash.bash_files
  (.*/\\.config/autostart$$) linux.bash.bash_files
  (.*/etc/profile$$) linux.bash.common_bash_files
  (.*/etc/profile\\.d/.*$$) linux.bash.common_bash_files
  (.*/etc/bash\\.bashrc$$) linux.bash.common_bash_files
  (.*/etc/rc\\.local$$) linux.bash.common_bash_files

[linux.bash.bash_files]
inherits: plugins.linux
cascade:
  plugins.linux.RVT_bash.BashFilesCp

[linux.bash.common_bash_files]
inherits: plugins.linux
cascade:
  plugins.linux.RVT_bash.BashFilesCp all_users='True'

[linux.bash.bash_history]
inherits: plugins.linux
description: Get the essential information about the bash_history of the different users. 
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_bash.BashHistory
  base.output.JSONSink outfile={outfile} indent="4"
default_params: {
  'outfile': '${plugins.linux.RVT_bash.BashHistory:outdir}/bash_history.json'
  }

;;;;;;;;;;;;;;;;;;;;;;; CHARACTERIZE
[linux.characterize]
inherits: plugins.linux
description: Describes basic information about linux partitions and OS.
  Results are stored under the directory `${plugins.linux:auxdir}`
help_section: linux
jobs:
    linux.characterize.os_summary
    linux.characterize.system

[linux.characterize.os_summary]
inherits: plugins.linux
description: Describes basic information about OS.
modules:
  base.templates.TemplateSink template_file='{template_file}' outfile='{outfile}' file_exists='{file_exists}'
  plugins.linux.RVT_os_info.CharacterizeLinux
template_file: templates/os_summary_linux.mako
outfile: ${analysisdir}/os_summary.md
default_params: {'outfile':'${outfile}',
  'template_file':'${template_file}',
  'file_exists':'OVERWRITE'}
params_help: {
  'outfile':'path to file were results are stored (in markdown format)',
  'template_file':'mako template to display results'}

[linux.characterize.system]
inherits: plugins.linux
description: Describes basic information about the file systems in the computer.
cascade:
  base.input.AllLinesInFile progress.disable=True
  plugins.linux.RVT_os_info.Fstab
  base.templates.TemplateSink template_file='{template_file}' outfile='{outfile}' file_exists='{file_exists}'
  base.directory.GlobFilter ftype='file'
template_file: templates/partitions_linux.mako
outfile: ${analysisdir}/partitions.md
default_params: {'outfile':'${outfile}',
  'template_file':'${template_file}',
  'file_exists':'OVERWRITE'}
params_help: {
  'outfile':'path to file were results are stored (in markdown format)',
  'template_file':'mako template to display results'}
path: ${mountdir}/p*/etc/fstab

;;;;;;;;;;;;;;;;;;;;;;; LOGS
[linux.logs]
inherits: plugins.linux
description: Includes file logs such as auth.log, kern.log, syslog, secure, messages, journal, maillog, daemon, config files...
  Results are stored under the directory `${plugins.linux:logsdir}` and a report at `${plugins.linux.RVT_logs.AnalysisLinuxSshLog:analysisdir}`
help_section: linux
jobs:
    linux.logs.auth_log
    linux.logs.secure
    linux.logs.syslog
    linux.logs.messages
    linux.logs.kern_log
    linux.logs.journal
    linux.logs.mail
    linux.logs.daemon_log
    linux.logs.extract_from_existing_log
    linux.logs.analysis
    linux.logs.config_files

[linux.logs.analysis]
inherits: plugins.linux
description: Make the analysis of the different logs
jobs:
    linux.logs.analysis.ssh

[linux.logs.analysis.ssh]
description: Get the interesting entries of the ssh log
cascade:
  base.input.CSVReader progress.disable=False 
  plugins.linux.RVT_logs.AnalysisLinuxSshLog
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_logs.AnalysisLinuxSshLog:analysisdir}/logins_ssh_from_logs.csv'}
path: ${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/ssh_auth.log.csv
  
[linux.logs.extract_from_existing_log]
inherits: plugins.linux
description: Extract specific log registers/information from auth_log, syslog, messages or kern_log
jobs:
    linux.logs.extract_from_existing_log.ssh
    linux.logs.extract_from_existing_log.sudo

[linux.logs.extract_from_existing_log.ssh]
inherits: plugins.linux
description: Get the ssh logs from auth.log.csv
cascade:
  base.commands.Command cmd='if [ -f {infile} ]  && grep -q sshd {infile} ; then head -n 1 {infile} >> {outfile}; grep -e sshd {infile} >> {outfile}; fi' 
default_params: {
  'infile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/auth.log.csv',
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/ssh_auth.log.csv'}
path: ${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/auth.log.csv

[linux.logs.extract_from_existing_log.sudo]
inherits: plugins.linux
description: Get the sudo logs from auth.log.csv
cascade:
  base.commands.Command cmd='if [ -f {infile} ]  && grep -q sudo {infile} ; then head -n 1 {infile} >> {outfile}; grep -e sudo {infile} >> {outfile}; fi' 
default_params: {
  'infile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/auth.log.csv',
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/sudo_auth.log.csv'}

[linux.logs.journal]
inherits: plugins.linux
description: Includes journal binary log file
cascade:
  plugins.linux.RVT_logs.JournalLogs
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='directory' sorted='True' reverse='True'
default_params: {
  'outfile': '${plugins.linux.RVT_logs.JournalLogs:outdir}/journal.csv'}
path: ${mountdir}/p*/var/log/journal/

[linux.logs.auth_log]
inherits: plugins.linux
description: Includes auth.log log file
jobs:
    linux.logs.auth_log.compressed
    linux.logs.auth_log.not_compressed

[linux.logs.auth_log.compressed]
inherits: plugins.linux
description: Parse auth.log compressed files
cascade:
  base.input.AllLinesInCompressedFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/auth.log.csv'}
path: ${mountdir}/p*/var/log/auth.log*

[linux.logs.auth_log.not_compressed]
inherits: plugins.linux
description: Parse auth.log not compressed files
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/auth.log.csv'}
path: ${mountdir}/p*/var/log/auth.log*

[linux.logs.daemon_log]
inherits: plugins.linux
description: Includes daemon.log log file
jobs:
    linux.logs.daemon_log.compressed
    linux.logs.daemon_log.not_compressed

[linux.logs.daemon_log.compressed]
inherits: plugins.linux
description: Parse daemon.log compressed files
cascade:
  base.input.AllLinesInCompressedFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/daemon.log.csv'}
path: ${mountdir}/p*/var/log/daemon.log*

[linux.logs.daemon_log.not_compressed]
inherits: plugins.linux
description: Parse daemon.log not compressed files
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/daemon.log.csv'}
path: ${mountdir}/p*/var/log/daemon.log*

[linux.logs.mail]
inherits: plugins.linux
description: Includes mail.log and mail.err log file
jobs:
    linux.logs.mail.mail_log.compressed
    linux.logs.mail.mail_log.not_compressed
    linux.logs.mail.mail_err.compressed
    linux.logs.mail.mail_err.not_compressed

[linux.logs.mail.mail_log.compressed]
inherits: plugins.linux
description: Parse mail.log compressed files
cascade:
  base.input.AllLinesInCompressedFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/mail.log.csv'}
path: ${mountdir}/p*/var/log/mail*log*

[linux.logs.mail.mail_log.not_compressed]
inherits: plugins.linux
description: Parse mail.log not compressed files
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/mail.log.csv'}
path: ${mountdir}/p*/var/log/mail*log*

[linux.logs.mail.mail_err.compressed]
inherits: plugins.linux
description: Parse mail.err compressed files
cascade:
  base.input.AllLinesInCompressedFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/mail.err.csv'}
path: ${mountdir}/p*/var/log/mail*err*

[linux.logs.mail.mail_err.not_compressed]
inherits: plugins.linux
description: Parse mail.err not compressed files
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/mail.err.csv'}
path: ${mountdir}/p*/var/log/mail*err*

[linux.logs.secure]
inherits: plugins.linux
description: Includes secure log file
jobs:
    linux.logs.secure.compressed
    linux.logs.secure.not_compressed

[linux.logs.secure.compressed]
inherits: plugins.linux
description: Parse secure compressed files
cascade:
  base.input.AllLinesInCompressedFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/secure.csv'}
path: ${mountdir}/p*/var/log/secure*

[linux.logs.secure.not_compressed]
inherits: plugins.linux
description: Parse secure not compressed files
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/secure.csv'}
path: ${mountdir}/p*/var/log/secure*

[linux.logs.config_files]
inherits: plugins.linux
description: Includes syslog filelog
jobs:
    linux.logs.config_files.logrotate.conf
    linux.logs.config_files.logrotate.d_folder

[linux.logs.config_files.logrotate.conf]
inherits: plugins.linux
description: Get the logrotate.conf configuration file
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/logrotate.conf.txt'}
path: ${mountdir}/p*/etc/logrotate.conf

[linux.logs.config_files.logrotate.d_folder]
inherits: plugins.linux
description: Get the configuration files of the logrotate.d folder
cascade:
  base.directory.CopyFile outdir={outdir}

  base.directory.GlobFilter ftype='file'
default_params: {
  'outdir': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/logrotate.d'}
path: ${mountdir}/p*/etc/logrotate.d/*

[linux.logs.syslog]
inherits: plugins.linux
description: Includes syslog filelog
jobs:
    linux.logs.syslog.conf
    linux.logs.syslog.d
    linux.logs.syslog.d_folder
    linux.logs.syslog.compressed
    linux.logs.syslog.not_compressed

[linux.logs.syslog.conf]
inherits: plugins.linux
description: Get the rsyslog.conf configuration file
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/syslog.conf.txt'}
path: ${mountdir}/p*/etc/*syslog.conf

[linux.logs.syslog.d]
inherits: plugins.linux
description: Get the rsyslog.d configuration file
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/syslog.d.txt'}
path: ${mountdir}/p*/etc/syslog.d

[linux.logs.syslog.d_folder]
inherits: plugins.linux
description: Get the rsyslog.d folder configuration files
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/syslog.d.txt'}
path: ${mountdir}/p*/etc/syslog.d/*

[linux.logs.syslog.compressed]
inherits: plugins.linux
description: Parse syslog compressed files
cascade:
  base.input.AllLinesInCompressedFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/syslog.csv'}
path: ${mountdir}/p*/var/log/syslog*

[linux.logs.syslog.not_compressed]
inherits: plugins.linux
description: Parse syslog not compressed files
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/syslog.csv'}
path: ${mountdir}/p*/var/log/syslog*

[linux.logs.messages]
inherits: plugins.linux
description: Includes messages log file
jobs:
    linux.logs.messages.compressed
    linux.logs.messages.not_compressed

[linux.logs.messages.compressed]
inherits: plugins.linux
description: Parse messages compressed files
cascade:
  base.input.AllLinesInCompressedFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/messages.csv'}
path: ${mountdir}/p*/var/log/messages*

[linux.logs.messages.not_compressed]
inherits: plugins.linux
description: Parse messages not compressed files
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/messages.csv'}
path: ${mountdir}/p*/var/log/messages*

[linux.logs.kern_log]
inherits: plugins.linux
description: Includes kern.log log file
jobs:
    linux.logs.kern_log.compressed
    linux.logs.kern_log.not_compressed

[linux.logs.kern_log.compressed]
inherits: plugins.linux
description: Parse kern.log compressed files
cascade:
  base.input.AllLinesInCompressedFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/kern.log.csv'}
path: ${mountdir}/p*/var/log/kern.log*

[linux.logs.kern_log.not_compressed]
inherits: plugins.linux
description: Parse kern.log not compressed files
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_logs.LinuxStandardLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_logs.LinuxStandardLog:outdir}/kern.log.csv'}
path: ${mountdir}/p*/var/log/kern.log*

;;;;;;;;;;;;;;;;;;;;;;; PACKAGES
[linux.packages]
inherits: plugins.linux
description: Includes the analysis of packages: dpkg, apt, yum, dnf, /opt, /usr/local
  Results are stored under the directory `${plugins.linux:packagesdir}` and some reports at `${plugins.linux:apersistences}`
help_section: linux
jobs:
    linux.packages.dpkg_log
    linux.packages.dpkg_status
    linux.packages.apt_history_log
    linux.packages.specific_folders
    linux.packages.yum_log
    linux.packages.dnf_log
    linux.packages.hawkey_log
    linux.packages.dnf_rpm_log
    linux.packages.dnf_librepo_log
    linux.packages.analysis

[linux.packages.dpkg_log]
inherits: plugins.linux
description: Includes dpkg.log log file
jobs:
    linux.packages.dpkg_log.compressed
    linux.packages.dpkg_log.not_compressed

[linux.packages.dpkg_log.compressed]
inherits: plugins.linux
description: Parse dpkg.log compressed files
cascade:
  base.input.AllLinesInCompressedFile
  plugins.linux.RVT_packages.LinuxDpkgLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux.RVT_packages.LinuxDpkgLog:outdir}/dpkg.log.csv'}
path: ${mountdir}/p*/var/log/dpkg.log*

[linux.packages.dpkg_log.not_compressed]
inherits: plugins.linux
description: Parse dpkg.log not compressed files
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_packages.LinuxDpkgLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_packages.LinuxDpkgLog:outdir}/dpkg.log.csv'}
path: ${mountdir}/p*/var/log/dpkg.log*

[linux.packages.dpkg_status]
inherits: plugins.linux
description: Includes lib/dpkg/status file, contains details about installed packages
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_packages.LinuxDpkgStatus
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_packages.LinuxDpkgStatus:outdir}/dpkgStatus.csv'}
path: ${mountdir}/p*/var/lib/dpkg/status

[linux.packages.apt_history_log]
inherits: plugins.linux
description: Includes apt/history.log  file
jobs:
    linux.packages.apt_history_log.compressed
    linux.packages.apt_history_log.not_compressed

[linux.packages.apt_history_log.compressed]
inherits: plugins.linux
description: Parse apt/history.log compressed files
cascade:
  base.input.AllLinesInCompressedFile
  plugins.linux.RVT_packages.LinuxAptHistoryLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND" indent="4"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux.RVT_packages.LinuxAptHistoryLog:outdir}/aptHistory.log.csv'}
path: ${mountdir}/p*/var/log/apt/history.log*

[linux.packages.apt_history_log.not_compressed]
inherits: plugins.linux
description: Parse apt/history.log not compressed files
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_packages.LinuxAptHistoryLog
  base.output.CSVSink outfile='{outfile}' file_exists="APPEND" indent="4"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux.RVT_packages.LinuxAptHistoryLog:outdir}/aptHistory.log.csv'}
path: ${mountdir}/p*/var/log/apt/history.log*

[linux.packages.analysis]
inherits: plugins.linux
description: Make the analysis of the different packages
jobs:
    linux.packages.analysis.apt.history
    linux.packages.analysis.dpkg_log
    linux.packages.analysis.dpkg_status

[linux.packages.analysis.apt.history]
description: Get the interesting entries of the apt/history log
cascade:
  base.input.CSVReader
  plugins.linux.RVT_packages.AnalysisLinuxAptHistoryLog
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_packages.AnalysisLinuxAptHistoryLog:analysisdir}/apt_packages_installed.csv'}
path: ${plugins.linux.RVT_packages.LinuxAptHistoryLog:outdir}/aptHistory.log.csv

[linux.packages.analysis.dpkg_log]
description: Get the interesting entries of the dpkg.log
cascade:
  base.input.CSVReader
  plugins.linux.RVT_packages.AnalysisLinuxDpkgLog 
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_packages.AnalysisLinuxDpkgLog:analysisdir}/dpkg_packages_installed.csv'}
path: ${plugins.linux.RVT_packages.LinuxDpkgLog:outdir}/dpkg.log.csv

[linux.packages.analysis.dpkg_status]
description: Get the interesting entries of the dpkgStatus.csv
cascade:
  base.input.CSVReader
  plugins.linux.RVT_packages.AnalysisLinuxDpkgStatus 
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_packages.AnalysisLinuxDpkgStatus:analysisdir}/dpkg_packages.csv'}
path: ${plugins.linux.RVT_packages.LinuxDpkgStatus:outdir}/dpkgStatus.csv

[linux.packages.yum_log]
inherits: plugins.linux
description: Includes yum.log log file
jobs:
    linux.packages.yum_log.compressed
    linux.packages.yum_log.not_compressed

[linux.packages.yum_log.compressed]
inherits: plugins.linux
description: Parse yum.log compressed files
cascade:
  base.input.AllLinesInCompressedFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux:packagesdir}/yum.log.txt'}
path: ${mountdir}/p*/var/log/yum.log*

[linux.packages.yum_log.not_compressed]
inherits: plugins.linux
description: Parse yum.log not compressed files
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux:packagesdir}/yum.log.txt'}
path: ${mountdir}/p*/var/log/yum.log*

[linux.packages.dnf_log]
inherits: plugins.linux
description: Includes dnf.log log file
jobs:
    linux.packages.dnf_log.compressed
    linux.packages.dnf_log.not_compressed

[linux.packages.dnf_log.compressed]
inherits: plugins.linux
description: Parse dnf.log compressed files
cascade:
  base.input.AllLinesInCompressedFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux:packagesdir}/dnf.log.txt'}
path: ${mountdir}/p*/var/log/dnf.log*

[linux.packages.dnf_log.not_compressed]
inherits: plugins.linux
description: Parse dnf.log not compressed files
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux:packagesdir}/dnf.log.txt'}
path: ${mountdir}/p*/var/log/dnf.log*

[linux.packages.hawkey_log]
inherits: plugins.linux
description: Includes hawkey.log log file
jobs:
    linux.packages.hawkey_log.compressed
    linux.packages.hawkey_log.not_compressed

[linux.packages.hawkey_log.compressed]
inherits: plugins.linux
description: Parse hawkey.log compressed files
cascade:
  base.input.AllLinesInCompressedFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux:packagesdir}/hawkey.log.txt'}
path: ${mountdir}/p*/var/log/hawkey.log*

[linux.packages.hawkey_log.not_compressed]
inherits: plugins.linux
description: Parse hawkey.log not compressed files
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux:packagesdir}/hawkey.log.txt'}
path: ${mountdir}/p*/var/log/hawkey.log*

[linux.packages.dnf_rpm_log]
inherits: plugins.linux
description: Includes dnf.rpm.log log file
jobs:
    linux.packages.dnf_rpm_log.compressed
    linux.packages.dnf_rpm_log.not_compressed

[linux.packages.dnf_rpm_log.compressed]
inherits: plugins.linux
description: Parse dnf.rpm.log compressed files
cascade:
  base.input.AllLinesInCompressedFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux:packagesdir}/dnf.rpm.log.txt'}
path: ${mountdir}/p*/var/log/dnf.rpm.log*

[linux.packages.dnf_rpm_log.not_compressed]
inherits: plugins.linux
description: Parse dnf.rpm.log not compressed files
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux:packagesdir}/dnf.rpm.log.txt'}
path: ${mountdir}/p*/var/log/dnf.rpm.log*

[linux.packages.dnf_librepo_log]
inherits: plugins.linux
description: Includes dnf.librepo.log log file
jobs:
    linux.packages.dnf_librepo_log.compressed
    linux.packages.dnf_librepo_log.not_compressed

[linux.packages.dnf_librepo_log.compressed]
inherits: plugins.linux
description: Parse dnf.librepo.log compressed files
cascade:
  base.input.AllLinesInCompressedFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' only_extensions='[".gz"]' 
default_params: {
  'outfile': '${plugins.linux:packagesdir}/dnf.librepo.log.txt'}
path: ${mountdir}/p*/var/log/dnf.librepo.log*

[linux.packages.dnf_librepo_log.not_compressed]
inherits: plugins.linux
description: Parse dnf.librepo.log not compressed files
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile='{outfile}' file_exists="APPEND"
  base.directory.GlobFilter ftype='file' sorted='True' reverse='True' exclude_extensions='[".gz", ".zip"]'   
default_params: {
  'outfile': '${plugins.linux:packagesdir}/dnf.librepo.log.txt'}
path: ${mountdir}/p*/var/log/dnf.librepo.log*

[linux.packages.specific_folders]
inherits: plugins.linux
description: Get the third party software in the /opt /usr/local folder
cascade:
  plugins.linux.RVT_packages.SpecificFolders

;;;;;;;;;;;;;;;;;;;;;;; SERVICES
[linux.services]
inherits: plugins.linux
description: Find information on the different services/startup scripts of the computer.
  Results are stored under the directory `${plugins.linux:servicesdir}` and a report in `${plugins.linux.RVT_services.AnalysisServicesList:analysisdir}`
help_section: linux
jobs:
  linux.services.output
  linux.services.list
  linux.services.list.analysis

[linux.services.output]
inherits: plugins.linux
description: Find information on the different services of the computer.
modules:
  plugins.common.RVT_files.SendAllocFiles
  services.FileParser
path: ${DEFAULT:mountdir}
 
[services.FileParser]
inherits = base.directory.FileParser
parsers = (.*/etc/inittab$$) linux.services.startup_scripts
  (.*/etc/rc\\.d/.*) linux.services.startup_scripts
  (.*/etc/rc\\.boot/.*) linux.services.startup_scripts
  (.*/etc/init\\.d/.*) linux.services.startup_scripts
  (.*/etc/init$$) linux.services.startup_scripts
  (.*/etc/inetd\\.conf$$) linux.services.startup_scripts
  (.*/etc/update\\.d$$) linux.services.startup_scripts
  (.*/var/run/motd\\.d/.*) linux.services.startup_scripts
  (.*/etc/xinetd/.*) linux.services.startup_scripts
  (.*/etc/xinet\\.d.*) linux.services.startup_scripts
  (.*/etc/systemd/system$$) linux.services.startup_scripts
  (.*/etc/systemd/system/multi-user\\.target\\.wants/.*) linux.services.startup_scripts
  (.*/etc/systemd/system/.*\\.service) linux.services.administrator_specific_service
  (.*/etc/xdg/autostart/.*) linux.services.startup_scripts
  (.*/\\.config/autostart/.*) linux.services.startup_scripts

[linux.services.startup_scripts]
inherits: plugins.linux
description: Find some startup scripts that are used to start services as the computer boots.
cascade:
  base.directory.CopyFile outdir={outdir}
default_params: {
  'outdir': '${plugins.linux:servicesdir}/startup_scripts'}

[linux.services.administrator_specific_service]
inherits: plugins.linux
description: Find some services in /etc/systemd/system.
cascade:
  base.directory.CopyFile outdir={outdir}
default_params: {
  'outdir': '${plugins.linux:servicesdir}/administrator_specific_scripts'}

[linux.services.list]
inherits: plugins.linux
description: Makes a list of services in the machine.
cascade:
  base.commands.Command cmd='find {mountdir} -type f -name "*.service" -printf "%h,%f\n" >> {outfile}'
default_params: {
  'mountdir': '${mountdir}',
  'outfile': '${plugins.linux:servicesdir}/list_of_services.txt'}

[linux.services.list.analysis]
inherits: plugins.linux
cascade:
  base.input.AllLinesInFile
  plugins.linux.RVT_services.AnalysisServicesList 
  base.output.CSVSink outfile={outfile} file_exists="APPEND"
  base.directory.GlobFilter ftype='file'
default_params: {
  'outfile': '${plugins.linux.RVT_services.AnalysisServicesList:analysisdir}/list_of_services.csv'}
path: ${plugins.linux:servicesdir}/list_of_services.txt

;;;;;;;;;;;;;;;;;;;;;;; NETWORK
[linux.network]
inherits: plugins.linux
description: Find information on the different network configurations. Interfaces, hosts, resolv, dnsmasq ..
  Results are stored under the directory `${plugins.linux:networkdir}`
help_section: linux
modules:
  plugins.common.RVT_files.SendAllocFiles
  network.FileParser
path: ${DEFAULT:mountdir}
 
[network.FileParser]
inherits = base.directory.FileParser
parsers = (.*/etc/wpa_supplicant/.*\\.conf$$) linux.network.wpa_supplicant
  (.*/etc/network/interfaces$$) linux.network.interfaces
  (.*/etc/hosts$$) linux.network.hosts
  (.*/etc/.*/resolv\\.conf$$) linux.network.resolv
  (.*/etc/dnsmasq\\.conf$$) linux.network.dnsmasq

[linux.network.interfaces]
inherits: plugins.linux
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile={outfile} file_exists="APPEND"
default_params: {
  'outfile': '${plugins.linux:networkdir}/interfaces_conf.txt'}

[linux.network.hosts]
inherits: plugins.linux
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile={outfile} file_exists="APPEND"
default_params: {
  'outfile': '${plugins.linux:networkdir}/hosts.txt'}

[linux.network.resolv]
inherits: plugins.linux
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile={outfile} file_exists="APPEND"
default_params: {
  'outfile': '${plugins.linux:networkdir}/resolv.conf.txt'}

[linux.network.dnsmasq]
inherits: plugins.linux
cascade:
  base.input.AllLinesInFile
  base.output.DummySink outfile={outfile} file_exists="APPEND"
default_params: {
  'outfile': '${plugins.linux:networkdir}/dnsmasq.conf.txt'}

[linux.network.wpa_supplicant]
inherits: plugins.linux
cascade:
  base.directory.CopyFile outdir={outdir}
default_params: {
  'outdir': '${plugins.linux:networkdir}/wpa_supplicant'}

;;;;;;;;;;;;;;;;;;;;;;; EXTRAFILES
[linux.extrafiles]
inherits: plugins.linux
description: Includes the analysis of other files such as viminfo, .local/share/recently-used and application_state, Recent, Trash, lesshst ...
  Results are stored under the directory `${plugins.linux:filesdir}`
help_section: linux
modules:
  plugins.common.RVT_files.SendAllocFiles
  extrafiles.FileParser
path: ${DEFAULT:mountdir}

[extrafiles.FileParser]
inherits = base.directory.FileParser
parsers = (.*/\\.viminfo$$) linux.extrafiles.viminfo
  (.*/\\.local/share/gnome-shell/application_state) linux.extrafiles.local
  (.*/\\.local/share/recently-used) linux.extrafiles.local
  (.*/\\.local/share/.*user-places) linux.extrafiles.local
  (.*/\\.local/share/Recent.*) linux.extrafiles.local
  (.*/\\.local/share/Trash/file/.*) linux.extrafiles.trash.file
  (.*/\\.local/share/Trash/info/.*) linux.extrafiles.trash.info
  (.*/\\.lesshst$$) linux.extrafiles.less

[linux.extrafiles.viminfo]
inherits: plugins.linux
description: Get the .viminfo files
cascade:
  plugins.linux.RVT_extra_files.CopyFilesWithUsername outdir='{outdir}' subfolder=".viminfo"
default_params: {
  'outdir': '${plugins.linux:filesdir}/viminfo'}

[linux.extrafiles.local]
inherits: plugins.linux
description: Get the .gnome_shell files from .local
cascade:
  plugins.linux.RVT_extra_files.CopyFilesWithUsername outdir='{outdir}' subfolder=".local"
default_params: {
  'outdir': '${plugins.linux:filesdir}/local'}

[linux.extrafiles.trash.file]
inherits: plugins.linux
description: Get the .trash/file files from .local
cascade:
  plugins.linux.RVT_extra_files.CopyFilesWithUsername outdir='{outdir}' subfolder=".local"
default_params: {
  'outdir': '${plugins.linux:filesdir}/trash/file'}

[linux.extrafiles.trash.info]
inherits: plugins.linux
description: Get the .trash/info files from .local
cascade:
  plugins.linux.RVT_extra_files.CopyFilesWithUsername outdir='{outdir}' subfolder=".local"
default_params: {
  'outdir': '${plugins.linux:filesdir}/trash/info'}

[linux.extrafiles.less]
inherits: plugins.linux
description: Get the .less files
cascade:
  plugins.linux.RVT_extra_files.CopyFilesWithUsername outdir='{outdir}' subfolder=".lesshst"
default_params: {
  'outdir': '${plugins.linux:filesdir}/less'}